/**
 * üîß SISTEMA DE CORRE√á√ÉO AUTOM√ÅTICA BIAPO v1.0
 * 
 * Identifica e corrige problemas de persist√™ncia automaticamente
 */

const CorretorAutomatico = {
    versao: '1.0',
    problemas: [],
    correcoes: [],
    
    // üöÄ EXECUTAR CORRE√á√ÉO COMPLETA
    async executarCorrecaoCompleta() {
        console.log('üîß ========== CORRETOR AUTOM√ÅTICO BIAPO v1.0 ==========');
        console.log('‚è∞ Iniciado em:', new Date().toLocaleString('pt-BR'));
        
        this.problemas = [];
        this.correcoes = [];
        
        // 1. Verificar e corrigir configura√ß√£o Supabase
        await this.corrigirConfiguracaoSupabase();
        
        // 2. Verificar e corrigir persist√™ncia
        await this.corrigirSistemaPersistencia();
        
        // 3. Verificar e corrigir banco de dados
        await this.verificarBancoDados();
        
        // 4. Limpar cache e dados corrompidos
        this.limparDadosCorrempidos();
        
        // 5. Testar funcionamento
        await this.testarSistemaCompleto();
        
        // 6. Relat√≥rio final
        this.gerarRelatorioCorrecao();
        
        return {
            problemas: this.problemas,
            correcoes: this.correcoes,
            sucesso: this.correcoes.length > 0
        };
    },
    
    // üîê CORRIGIR CONFIGURA√á√ÉO SUPABASE
    async corrigirConfiguracaoSupabase() {
        console.log('\nüîê VERIFICANDO CONFIGURA√á√ÉO SUPABASE...');
        
        try {
            // Verificar se configura√ß√£o existe
            if (!window.SUPABASE_CONFIG) {
                this.problemas.push('window.SUPABASE_CONFIG n√£o definida');
                
                // Tentar carregar do EnvLoader
                if (typeof EnvLoader !== 'undefined') {
                    console.log('üîÑ Tentando carregar via EnvLoader...');
                    await EnvLoader.carregarCredenciais();
                    
                    if (window.SUPABASE_CONFIG) {
                        this.correcoes.push('‚úÖ Credenciais carregadas via EnvLoader');
                        console.log('‚úÖ Configura√ß√£o carregada automaticamente!');
                    }
                } else {
                    // Definir configura√ß√£o de fallback
                    window.SUPABASE_CONFIG = {
                        url: 'https://vyquhmlxjrvbdwgadtxc.supabase.co',
                        key: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ5cXVobWx4anJ2YmR3Z2FkdHhjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI2NzQyMDYsImV4cCI6MjA2ODI1MDIwNn0.zyj_8uW4T7E40ekdqDDW8E91P7LpXD5Pr53GCrPqMvM'
                    };
                    this.correcoes.push('‚úÖ Configura√ß√£o de fallback aplicada');
                    console.log('‚úÖ Configura√ß√£o de fallback aplicada!');
                }
            } else {
                console.log('‚úÖ window.SUPABASE_CONFIG j√° definida');
            }
            
            // Verificar se supabaseClient existe
            if (!window.supabaseClient) {
                this.problemas.push('supabaseClient n√£o inicializado');
                
                // Tentar reinicializar
                if (typeof SupabaseClient !== 'undefined') {
                    console.log('üîÑ Reinicializando supabaseClient...');
                    window.supabaseClient = new SupabaseClient();
                    this.correcoes.push('‚úÖ supabaseClient reinicializado');
                }
            }
            
            // Testar conex√£o
            if (window.supabaseClient) {
                const conectado = await window.supabaseClient.testarConexao();
                if (conectado) {
                    console.log('‚úÖ Conex√£o Supabase funcionando');
                    this.correcoes.push('‚úÖ Conex√£o Supabase testada com sucesso');
                } else {
                    this.problemas.push('Falha na conex√£o Supabase');
                }
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao corrigir configura√ß√£o Supabase:', error);
            this.problemas.push(`Erro configura√ß√£o Supabase: ${error.message}`);
        }
    },
    
    // üíæ CORRIGIR SISTEMA DE PERSIST√äNCIA
    async corrigirSistemaPersistencia() {
        console.log('\nüíæ VERIFICANDO SISTEMA DE PERSIST√äNCIA...');
        
        try {
            // Verificar se Persistence existe
            if (typeof Persistence === 'undefined') {
                this.problemas.push('M√≥dulo Persistence n√£o carregado');
                console.error('‚ùå M√≥dulo Persistence n√£o encontrado!');
                return;
            }
            
            console.log('‚úÖ M√≥dulo Persistence carregado');
            
            // Testar salvamento local
            try {
                const dadosTeste = { teste: 'corretor_automatico', timestamp: Date.now() };
                Persistence._salvarBackupLocal(dadosTeste);
                console.log('‚úÖ Salvamento local funcionando');
                this.correcoes.push('‚úÖ Salvamento local testado');
            } catch (error) {
                this.problemas.push(`Erro salvamento local: ${error.message}`);
            }
            
            // Limpar cache de usu√°rio
            if (Persistence.state) {
                Persistence.state.ultimaVerificacaoUsuario = null;
                Persistence.state.usuarioAtual = null;
                console.log('‚úÖ Cache de usu√°rio limpo');
                this.correcoes.push('‚úÖ Cache de usu√°rio reiniciado');
            }
            
            // Testar verifica√ß√£o de usu√°rio
            const usuario = Persistence._verificarUsuarioLogado();
            console.log(`üë§ Usu√°rio atual: ${usuario ? usuario.email || 'ID: ' + usuario.id : 'Nenhum'}`);
            
            // Testar salvamento cr√≠tico
            if (typeof App !== 'undefined' && App.dados) {
                console.log('üß™ Testando salvamento cr√≠tico...');
                await Persistence.salvarDados();
                this.correcoes.push('‚úÖ Teste de salvamento executado');
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao corrigir persist√™ncia:', error);
            this.problemas.push(`Erro persist√™ncia: ${error.message}`);
        }
    },
    
    // üóÑÔ∏è VERIFICAR BANCO DE DADOS
    async verificarBancoDados() {
        console.log('\nüóÑÔ∏è VERIFICANDO BANCO DE DADOS...');
        
        try {
            if (!window.supabaseClient) {
                this.problemas.push('Cliente Supabase n√£o dispon√≠vel para teste BD');
                return;
            }
            
            // Testar tabelas principais
            const tabelas = ['usuarios', 'eventos', 'tarefas', 'backups_sistema'];
            
            for (const tabela of tabelas) {
                try {
                    const dados = await window.supabaseClient.buscar(tabela);
                    console.log(`‚úÖ Tabela ${tabela}: ${dados.length} registros`);
                    this.correcoes.push(`‚úÖ Tabela ${tabela} acess√≠vel`);
                } catch (error) {
                    console.error(`‚ùå Erro tabela ${tabela}:`, error.message);
                    this.problemas.push(`Tabela ${tabela} inacess√≠vel: ${error.message}`);
                }
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao verificar banco:', error);
            this.problemas.push(`Erro verifica√ß√£o BD: ${error.message}`);
        }
    },
    
    // üßπ LIMPAR DADOS CORROMPIDOS
    limparDadosCorrempidos() {
        console.log('\nüßπ LIMPANDO DADOS CORROMPIDOS...');
        
        try {
            let dadosLimpos = 0;
            
            // Limpar localStorage corrompido
            const chaves = ['biapo_dados_corrompido', 'biapo_temp_invalid', 'firebase_config_old'];
            chaves.forEach(chave => {
                if (localStorage.getItem(chave)) {
                    localStorage.removeItem(chave);
                    dadosLimpos++;
                }
            });
            
            // Verificar dados App principais
            if (typeof App !== 'undefined' && App.dados) {
                let dadosCorrigidos = false;
                
                // Corrigir eventos sem ID
                if (Array.isArray(App.dados.eventos)) {
                    App.dados.eventos.forEach((evento, index) => {
                        if (!evento.id) {
                            evento.id = 'evento_' + Date.now() + '_' + index;
                            dadosCorrigidos = true;
                        }
                    });
                }
                
                // Corrigir tarefas sem ID
                if (Array.isArray(App.dados.tarefas)) {
                    App.dados.tarefas.forEach((tarefa, index) => {
                        if (!tarefa.id) {
                            tarefa.id = 'tarefa_' + Date.now() + '_' + index;
                            dadosCorrigidos = true;
                        }
                    });
                }
                
                if (dadosCorrigidos) {
                    console.log('‚úÖ Dados do App corrigidos');
                    this.correcoes.push('‚úÖ IDs faltantes adicionados aos dados');
                }
            }
            
            if (dadosLimpos > 0) {
                console.log(`‚úÖ ${dadosLimpos} entradas corrompidas removidas`);
                this.correcoes.push(`‚úÖ ${dadosLimpos} dados corrompidos limpos`);
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao limpar dados:', error);
            this.problemas.push(`Erro limpeza: ${error.message}`);
        }
    },
    
    // üß™ TESTAR SISTEMA COMPLETO
    async testarSistemaCompleto() {
        console.log('\nüß™ TESTANDO SISTEMA COMPLETO...');
        
        try {
            // Teste 1: Criar tarefa tempor√°ria
            if (typeof App !== 'undefined' && typeof App.criarTarefa === 'function') {
                console.log('üß™ Teste 1: Cria√ß√£o de tarefa...');
                const tarefaTeste = {
                    titulo: `üîß Teste Corretor ${Date.now()}`,
                    descricao: 'Tarefa criada pelo corretor autom√°tico',
                    tipo: 'pessoal'
                };
                
                try {
                    const resultado = await App.criarTarefa(tarefaTeste);
                    if (resultado) {
                        console.log('‚úÖ Cria√ß√£o de tarefa funcionando');
                        this.correcoes.push('‚úÖ Teste cria√ß√£o tarefa: SUCESSO');
                        
                        // Remover tarefa teste
                        setTimeout(() => {
                            if (typeof App.excluirTarefa === 'function') {
                                App.excluirTarefa(resultado.id);
                            }
                        }, 1000);
                    }
                } catch (error) {
                    console.error('‚ùå Falha teste cria√ß√£o tarefa:', error);
                    this.problemas.push(`Teste cria√ß√£o tarefa falhou: ${error.message}`);
                }
            }
            
            // Teste 2: Salvamento de dados
            if (typeof Persistence !== 'undefined') {
                console.log('üß™ Teste 2: Salvamento de dados...');
                try {
                    await Persistence.salvarDados();
                    console.log('‚úÖ Salvamento de dados funcionando');
                    this.correcoes.push('‚úÖ Teste salvamento: SUCESSO');
                } catch (error) {
                    console.error('‚ùå Falha teste salvamento:', error);
                    this.problemas.push(`Teste salvamento falhou: ${error.message}`);
                }
            }
            
            // Teste 3: Conectividade Supabase
            if (window.supabaseClient) {
                console.log('üß™ Teste 3: Conectividade Supabase...');
                try {
                    const conectado = await window.supabaseClient.testarConexao();
                    if (conectado) {
                        console.log('‚úÖ Conectividade Supabase funcionando');
                        this.correcoes.push('‚úÖ Teste conectividade: SUCESSO');
                    } else {
                        this.problemas.push('Teste conectividade: FALHA');
                    }
                } catch (error) {
                    this.problemas.push(`Teste conectividade falhou: ${error.message}`);
                }
            }
            
        } catch (error) {
            console.error('‚ùå Erro nos testes:', error);
            this.problemas.push(`Erro testes: ${error.message}`);
        }
    },
    
    // üìä GERAR RELAT√ìRIO DE CORRE√á√ÉO
    gerarRelatorioCorrecao() {
        console.log('\nüìä ========== RELAT√ìRIO DE CORRE√á√ÉO ==========');
        
        console.log(`\nüîß CORRE√á√ïES APLICADAS (${this.correcoes.length}):`);
        if (this.correcoes.length > 0) {
            this.correcoes.forEach((correcao, i) => {
                console.log(`   ${i + 1}. ${correcao}`);
            });
        } else {
            console.log('   ‚ÑπÔ∏è Nenhuma corre√ß√£o foi necess√°ria');
        }
        
        console.log(`\n‚ö†Ô∏è PROBLEMAS DETECTADOS (${this.problemas.length}):`);
        if (this.problemas.length > 0) {
            this.problemas.forEach((problema, i) => {
                console.log(`   ${i + 1}. ${problema}`);
            });
        } else {
            console.log('   üéâ Nenhum problema detectado!');
        }
        
        const status = this.problemas.length === 0 ? 'üü¢ SISTEMA SAUD√ÅVEL' :
                      this.problemas.length <= 2 ? 'üü° PROBLEMAS MENORES' :
                      this.problemas.length <= 5 ? 'üü† ATEN√á√ÉO NECESS√ÅRIA' :
                      'üî¥ PROBLEMAS CR√çTICOS';
        
        console.log(`\nüìä STATUS FINAL: ${status}`);
        console.log(`‚úÖ Corre√ß√µes: ${this.correcoes.length} | ‚ö†Ô∏è Problemas: ${this.problemas.length}`);
        
        if (this.correcoes.length > 0) {
            console.log('\nüí° RECOMENDA√á√ïES:');
            console.log('   ‚Ä¢ Reiniciar o navegador para garantir que todas as corre√ß√µes sejam aplicadas');
            console.log('   ‚Ä¢ Testar cria√ß√£o de tarefas e eventos');
            console.log('   ‚Ä¢ Verificar se dados est√£o sendo salvos corretamente');
            
            if (typeof Notifications !== 'undefined') {
                Notifications.success(`‚úÖ ${this.correcoes.length} corre√ß√µes aplicadas com sucesso!`);
            }
        }
        
        if (this.problemas.length > 0) {
            console.log('\nüõ†Ô∏è A√á√ïES NECESS√ÅRIAS:');
            if (this.problemas.some(p => p.includes('Tabela'))) {
                console.log('   ‚Ä¢ Execute o script estrutura-supabase-fixed.sql no painel Supabase');
            }
            if (this.problemas.some(p => p.includes('conectividade'))) {
                console.log('   ‚Ä¢ Verifique suas credenciais Supabase');
                console.log('   ‚Ä¢ Confirme se o projeto Supabase est√° ativo');
            }
        }
        
        console.log('\n‚è∞ Corre√ß√£o conclu√≠da em:', new Date().toLocaleString('pt-BR'));
        console.log('üîß ==========================================\n');
    },
    
    // üöÄ CORRE√á√ÉO EXPRESSA (problemas mais comuns)
    async correcaoExpressa() {
        console.log('üöÄ CORRE√á√ÉO EXPRESSA - Problemas mais comuns...');
        
        const correcoes = [];
        
        try {
            // 1. Configura√ß√£o Supabase
            if (!window.SUPABASE_CONFIG && typeof EnvLoader !== 'undefined') {
                await EnvLoader.carregarCredenciais();
                correcoes.push('‚úÖ Credenciais Supabase carregadas');
            }
            
            // 2. Limpar cache usu√°rio
            if (typeof Persistence !== 'undefined' && Persistence.state) {
                Persistence.state.ultimaVerificacaoUsuario = null;
                Persistence.state.usuarioAtual = null;
                correcoes.push('‚úÖ Cache de usu√°rio limpo');
            }
            
            // 3. Testar conectividade
            if (window.supabaseClient) {
                const conectado = await window.supabaseClient.testarConexao();
                if (conectado) {
                    correcoes.push('‚úÖ Conectividade testada');
                }
            }
            
            console.log(`üéâ Corre√ß√£o expressa conclu√≠da: ${correcoes.length} itens corrigidos`);
            if (typeof Notifications !== 'undefined') {
                Notifications.success(`‚úÖ Corre√ß√£o expressa: ${correcoes.length} itens corrigidos!`);
            }
            
            return correcoes;
            
        } catch (error) {
            console.error('‚ùå Erro na corre√ß√£o expressa:', error);
            return [];
        }
    }
};

// üåç FUN√á√ïES GLOBAIS
window.corretorAutomatico = () => CorretorAutomatico.executarCorrecaoCompleta();
window.correcaoExpressa = () => CorretorAutomatico.correcaoExpressa();
window.CorretorAutomatico = CorretorAutomatico;

console.log('üîß Corretor Autom√°tico BIAPO v1.0 carregado!');
console.log('üìã Comandos dispon√≠veis:');
console.log('   ‚Ä¢ corretorAutomatico() - Corre√ß√£o completa (recomendado)');
console.log('   ‚Ä¢ correcaoExpressa() - Corre√ß√£o r√°pida dos problemas mais comuns');

/*
üîß CORRETOR AUTOM√ÅTICO BIAPO v1.0

‚úÖ FUNCIONALIDADES:
- üîê Corrige configura√ß√£o Supabase automaticamente
- üíæ Resolve problemas de persist√™ncia
- üóÑÔ∏è Verifica tabelas do banco de dados
- üßπ Limpa dados corrompidos
- üß™ Testa funcionamento completo
- üìä Gera relat√≥rio detalhado

üöÄ USO RECOMENDADO:
1. Execute corretorAutomatico() no console
2. Aguarde a an√°lise completa
3. Siga as recomenda√ß√µes do relat√≥rio
4. Reinicie o navegador se necess√°rio

‚ö° CORRE√á√ÉO R√ÅPIDA:
- Use correcaoExpressa() para problemas simples
- Ideal para resolver problemas de cache e configura√ß√£o
*/
