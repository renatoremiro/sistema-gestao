/**
 * üîç SISTEMA DE DIAGN√ìSTICO PROFUNDO BIAPO v1.0
 * 
 * An√°lise completa de integridade, sincroniza√ß√£o e confiabilidade
 */

const DiagnosticoBIAPO = {
    versao: '1.0',
    resultados: {
        usuarios: {},
        sincronizacao: {},
        armazenamento: {},
        integracao: {},
        confiabilidade: {}
    },
    
    // üöÄ EXECUTAR DIAGN√ìSTICO COMPLETO
    async executarDiagnosticoCompleto() {
        console.log('üîç ========== DIAGN√ìSTICO PROFUNDO BIAPO v1.0 ==========');
        console.log('‚è∞ Iniciado em:', new Date().toLocaleString('pt-BR'));
        console.log('');
        
        // 1. Verificar usu√°rios
        await this.verificarUsuarios();
        
        // 2. Verificar sincroniza√ß√£o
        await this.verificarSincronizacao();
        
        // 3. Verificar armazenamento
        await this.verificarArmazenamento();
        
        // 4. Verificar integra√ß√£o
        await this.verificarIntegracao();
        
        // 5. Teste de confiabilidade
        await this.testeConfiabilidade();
        
        // 6. Gerar relat√≥rio
        this.gerarRelatorio();
        
        return this.resultados;
    },
    
    // üë• VERIFICAR USU√ÅRIOS
    async verificarUsuarios() {
        console.log('\nüë• VERIFICANDO SISTEMA DE USU√ÅRIOS...');
        
        const testes = {
            authCarregado: false,
            usuarioLogado: false,
            totalUsuarios: 0,
            usuariosFirebase: 0,
            usuariosLocal: 0,
            sincronizados: false,
            permissoes: {}
        };
        
        try {
            // Verificar Auth
            if (typeof Auth !== 'undefined') {
                testes.authCarregado = true;
                console.log('‚úÖ Auth.js carregado');
                
                // Verificar usu√°rio logado
                if (Auth.estaLogado()) {
                    testes.usuarioLogado = true;
                    const usuario = Auth.obterUsuario();
                    console.log(`‚úÖ Usu√°rio logado: ${usuario.email}`);
                    console.log(`   Nome: ${usuario.displayName}`);
                    console.log(`   Admin: ${usuario.admin ? 'SIM' : 'N√ÉO'}`);
                    
                    testes.permissoes = {
                        admin: Auth.ehAdmin(),
                        podeEditar: !App?.estadoSistema?.modoAnonimo
                    };
                }
                
                // Contar usu√°rios
                const usuarios = Auth.listarUsuarios();
                testes.totalUsuarios = usuarios.length;
                console.log(`‚úÖ Total de usu√°rios: ${usuarios.length}`);
                
                // Verificar fonte
                const status = Auth.obterStatus();
                if (status.firebase?.carregadoDoFirebase) {
                    testes.usuariosFirebase = usuarios.length;
                    console.log('‚úÖ Usu√°rios carregados do Firebase');
                } else {
                    testes.usuariosLocal = usuarios.length;
                    console.log('‚ö†Ô∏è Usu√°rios carregados localmente (fallback)');
                }
                
                // Listar departamentos
                console.log('\nüè¢ DEPARTAMENTOS:');
                const deptos = Auth.departamentos;
                deptos.forEach((dept, i) => {
                    const usuariosDepto = usuarios.filter(u => u.departamento === dept);
                    console.log(`   ${i+1}. ${dept}: ${usuariosDepto.length} usu√°rios`);
                });
                
            } else {
                console.error('‚ùå Auth.js n√£o encontrado!');
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao verificar usu√°rios:', error);
        }
        
        this.resultados.usuarios = testes;
    },
    
    // üîÑ VERIFICAR SINCRONIZA√á√ÉO
    async verificarSincronizacao() {
        console.log('\nüîÑ VERIFICANDO SINCRONIZA√á√ÉO...');
        
        const testes = {
            appInicializado: false,
            firebaseConectado: false,
            dadosSincronizados: false,
            ultimaSincronizacao: null,
            participantesFuncionando: false,
            tarefasCompartilhadas: 0
        };
        
        try {
            // Verificar App
            if (typeof App !== 'undefined') {
                testes.appInicializado = App.estadoSistema?.inicializado;
                console.log(`${testes.appInicializado ? '‚úÖ' : '‚ùå'} App.js inicializado`);
                
                // Firebase
                testes.firebaseConectado = App.estadoSistema?.firebaseDisponivel;
                console.log(`${testes.firebaseConectado ? '‚úÖ' : '‚ö†Ô∏è'} Firebase ${testes.firebaseConectado ? 'conectado' : 'offline (usando localStorage)'}`);
                
                // Verificar dados
                const eventos = App.dados?.eventos || [];
                const tarefas = App.dados?.tarefas || [];
                console.log(`üìä Dados: ${eventos.length} eventos + ${tarefas.length} tarefas`);
                
                // Verificar tarefas com participantes
                const tarefasComParticipantes = tarefas.filter(t => 
                    t.participantes && t.participantes.length > 0
                );
                testes.tarefasCompartilhadas = tarefasComParticipantes.length;
                console.log(`üë• Tarefas com participantes: ${testes.tarefasCompartilhadas}`);
                
                // Testar sincroniza√ß√£o de participantes
                if (tarefasComParticipantes.length > 0) {
                    console.log('\nüß™ TESTE DE PARTICIPANTES:');
                    const tarefa = tarefasComParticipantes[0];
                    console.log(`   Tarefa: "${tarefa.titulo}"`);
                    console.log(`   Participantes: ${tarefa.participantes.join(', ')}`);
                    
                    // Simular filtro para cada participante
                    tarefa.participantes.forEach(participante => {
                        const veriaATarefa = this.participanteVeriaTarefa(tarefa, participante);
                        console.log(`   ${participante}: ${veriaATarefa ? '‚úÖ v√™ a tarefa' : '‚ùå N√ÉO v√™ a tarefa'}`);
                    });
                    
                    testes.participantesFuncionando = true;
                }
                
                // Verificar √∫ltima sincroniza√ß√£o
                testes.ultimaSincronizacao = App.dados?.metadata?.ultimaAtualizacao;
                if (testes.ultimaSincronizacao) {
                    const data = new Date(testes.ultimaSincronizacao);
                    console.log(`üïê √öltima sincroniza√ß√£o: ${data.toLocaleString('pt-BR')}`);
                }
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao verificar sincroniza√ß√£o:', error);
        }
        
        this.resultados.sincronizacao = testes;
    },
    
    // üíæ VERIFICAR ARMAZENAMENTO
    async verificarArmazenamento() {
        console.log('\nüíæ VERIFICANDO ARMAZENAMENTO...');
        
        const testes = {
            localStorage: false,
            sessionStorage: false,
            firebase: false,
            backupDisponivel: false,
            tamanhoTotal: 0,
            dadosRecuperaveis: false
        };
        
        try {
            // LocalStorage
            const dadosLocal = localStorage.getItem('biapo_dados_v8');
            if (dadosLocal) {
                testes.localStorage = true;
                testes.tamanhoTotal = dadosLocal.length;
                console.log(`‚úÖ LocalStorage: ${(dadosLocal.length / 1024).toFixed(2)} KB`);
                
                // Verificar timestamp
                const timestamp = localStorage.getItem('biapo_dados_timestamp');
                if (timestamp) {
                    console.log(`   √öltimo save: ${new Date(timestamp).toLocaleString('pt-BR')}`);
                }
            } else {
                console.log('‚ö†Ô∏è LocalStorage vazio');
            }
            
            // SessionStorage
            const dadosSession = sessionStorage.getItem('biapo_dados_backup');
            if (dadosSession) {
                testes.sessionStorage = true;
                console.log(`‚úÖ SessionStorage backup: ${(dadosSession.length / 1024).toFixed(2)} KB`);
            }
            
            // Firebase
            if (App?.estadoSistema?.firebaseDisponivel && typeof database !== 'undefined') {
                try {
                    console.log('üîÑ Testando leitura do Firebase...');
                    const snapshot = await database.ref('dados/metadata/versao').once('value');
                    if (snapshot.exists()) {
                        testes.firebase = true;
                        console.log(`‚úÖ Firebase acess√≠vel - vers√£o: ${snapshot.val()}`);
                    }
                } catch (error) {
                    console.log('‚ö†Ô∏è Firebase inacess√≠vel:', error.message);
                }
            }
            
            // Backup de emerg√™ncia
            const backupEmergencia = localStorage.getItem('biapo_backup_emergencia');
            if (backupEmergencia) {
                testes.backupDisponivel = true;
                console.log('‚úÖ Backup de emerg√™ncia dispon√≠vel');
            }
            
            // Teste de recupera√ß√£o
            testes.dadosRecuperaveis = testes.localStorage || testes.firebase || testes.backupDisponivel;
            console.log(`${testes.dadosRecuperaveis ? '‚úÖ' : '‚ùå'} Dados recuper√°veis em caso de falha`);
            
        } catch (error) {
            console.error('‚ùå Erro ao verificar armazenamento:', error);
        }
        
        this.resultados.armazenamento = testes;
    },
    
    // üîó VERIFICAR INTEGRA√á√ÉO
    async verificarIntegracao() {
        console.log('\nüîó VERIFICANDO INTEGRA√á√ÉO ENTRE M√ìDULOS...');
        
        const testes = {
            appAuth: false,
            appCalendar: false,
            appEvents: false,
            calendarFiltros: false,
            eventosParticipantes: false,
            deepLinks: false
        };
        
        try {
            // App + Auth
            if (App?.usuarioAtual && Auth?.obterUsuario()) {
                const usuarioApp = App.usuarioAtual.email;
                const usuarioAuth = Auth.obterUsuario().email;
                testes.appAuth = usuarioApp === usuarioAuth;
                console.log(`${testes.appAuth ? '‚úÖ' : '‚ùå'} App + Auth sincronizados`);
            }
            
            // App + Calendar
            if (typeof Calendar !== 'undefined' && Calendar._obterItensDoDia) {
                testes.appCalendar = true;
                console.log('‚úÖ App + Calendar integrados');
            }
            
            // App + Events
            if (typeof Events !== 'undefined' && App?._buscarEvento) {
                testes.appEvents = true;
                console.log('‚úÖ App + Events integrados');
            }
            
            // Testar filtros do Calendar
            if (App?._aplicarFiltrosExibicao) {
                const testeFiltro = App._aplicarFiltrosExibicao([], [{
                    titulo: 'Teste',
                    escopo: 'pessoal',
                    responsavel: App.usuarioAtual?.email || 'teste@teste.com'
                }]);
                testes.calendarFiltros = !testeFiltro.erro;
                console.log(`${testes.calendarFiltros ? '‚úÖ' : '‚ùå'} Filtros Calendar funcionando`);
            }
            
            // Deep Links
            if (App?._gerarDeepLink) {
                const deepLink = App._gerarDeepLink('tarefa', 'teste123', 'editar');
                testes.deepLinks = deepLink.includes('agenda.html');
                console.log(`${testes.deepLinks ? '‚úÖ' : '‚ùå'} Deep Links funcionando`);
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao verificar integra√ß√£o:', error);
        }
        
        this.resultados.integracao = testes;
    },
    
    // üß™ TESTE DE CONFIABILIDADE
    async testeConfiabilidade() {
        console.log('\nüß™ TESTE DE CONFIABILIDADE...');
        
        const testes = {
            criarTarefa: false,
            editarTarefa: false,
            excluirTarefa: false,
            salvarDados: false,
            recuperarDados: false,
            tempoResposta: 0
        };
        
        try {
            const inicio = Date.now();
            
            // 1. Criar tarefa teste
            console.log('1Ô∏è‚É£ Testando criar tarefa...');
            let tarefaTeste = null;
            try {
                tarefaTeste = await App.criarTarefa({
                    titulo: `üß™ Teste Diagn√≥stico ${Date.now()}`,
                    descricao: 'Tarefa criada pelo sistema de diagn√≥stico',
                    tipo: 'pessoal',
                    participantes: ['teste1', 'teste2']
                });
                testes.criarTarefa = !!tarefaTeste;
                console.log(`   ${testes.criarTarefa ? '‚úÖ' : '‚ùå'} Criar tarefa`);
            } catch (e) {
                console.log('   ‚ùå Erro ao criar tarefa:', e.message);
            }
            
            // 2. Editar tarefa
            if (tarefaTeste) {
                console.log('2Ô∏è‚É£ Testando editar tarefa...');
                try {
                    await App.editarTarefa(tarefaTeste.id, {
                        descricao: 'Descri√ß√£o editada pelo diagn√≥stico'
                    });
                    testes.editarTarefa = true;
                    console.log('   ‚úÖ Editar tarefa');
                } catch (e) {
                    console.log('   ‚ùå Erro ao editar tarefa:', e.message);
                }
            }
            
            // 3. Salvar dados
            console.log('3Ô∏è‚É£ Testando salvar dados...');
            try {
                await App._salvarDadosUnificados();
                testes.salvarDados = true;
                console.log('   ‚úÖ Salvar dados');
            } catch (e) {
                console.log('   ‚ùå Erro ao salvar:', e.message);
            }
            
            // 4. Excluir tarefa
            if (tarefaTeste) {
                console.log('4Ô∏è‚É£ Testando excluir tarefa...');
                try {
                    await App.excluirTarefa(tarefaTeste.id);
                    testes.excluirTarefa = true;
                    console.log('   ‚úÖ Excluir tarefa');
                } catch (e) {
                    console.log('   ‚ùå Erro ao excluir:', e.message);
                }
            }
            
            // 5. Tempo de resposta
            testes.tempoResposta = Date.now() - inicio;
            console.log(`‚è±Ô∏è Tempo total: ${testes.tempoResposta}ms`);
            
        } catch (error) {
            console.error('‚ùå Erro no teste de confiabilidade:', error);
        }
        
        this.resultados.confiabilidade = testes;
    },
    
    // üìä GERAR RELAT√ìRIO
    gerarRelatorio() {
        console.log('\nüìä ========== RELAT√ìRIO FINAL ==========\n');
        
        // Calcular pontua√ß√£o
        let pontos = 0;
        let total = 0;
        
        // Usu√°rios (25 pontos)
        if (this.resultados.usuarios.authCarregado) pontos += 5;
        if (this.resultados.usuarios.usuarioLogado) pontos += 5;
        if (this.resultados.usuarios.totalUsuarios > 0) pontos += 10;
        if (this.resultados.usuarios.usuariosFirebase > 0) pontos += 5;
        total += 25;
        
        // Sincroniza√ß√£o (25 pontos)
        if (this.resultados.sincronizacao.appInicializado) pontos += 10;
        if (this.resultados.sincronizacao.participantesFuncionando) pontos += 10;
        if (this.resultados.sincronizacao.tarefasCompartilhadas > 0) pontos += 5;
        total += 25;
        
        // Armazenamento (25 pontos)
        if (this.resultados.armazenamento.localStorage) pontos += 10;
        if (this.resultados.armazenamento.firebase) pontos += 10;
        if (this.resultados.armazenamento.dadosRecuperaveis) pontos += 5;
        total += 25;
        
        // Integra√ß√£o (15 pontos)
        if (this.resultados.integracao.appAuth) pontos += 5;
        if (this.resultados.integracao.appCalendar) pontos += 5;
        if (this.resultados.integracao.calendarFiltros) pontos += 5;
        total += 15;
        
        // Confiabilidade (10 pontos)
        if (this.resultados.confiabilidade.criarTarefa) pontos += 3;
        if (this.resultados.confiabilidade.editarTarefa) pontos += 3;
        if (this.resultados.confiabilidade.salvarDados) pontos += 4;
        total += 10;
        
        const porcentagem = (pontos / total) * 100;
        const status = porcentagem >= 90 ? 'üü¢ EXCELENTE' : 
                      porcentagem >= 75 ? 'üü° BOM' : 
                      porcentagem >= 60 ? 'üü† REGULAR' : 
                      'üî¥ CR√çTICO';
        
        console.log(`PONTUA√á√ÉO FINAL: ${status} (${porcentagem.toFixed(1)}%)`);
        console.log(`Pontos: ${pontos}/${total}`);
        
        console.log('\nüìã RESUMO POR CATEGORIA:');
        console.log(`üë• Usu√°rios: ${this.calcularPorcentagem(this.resultados.usuarios)}%`);
        console.log(`üîÑ Sincroniza√ß√£o: ${this.calcularPorcentagem(this.resultados.sincronizacao)}%`);
        console.log(`üíæ Armazenamento: ${this.calcularPorcentagem(this.resultados.armazenamento)}%`);
        console.log(`üîó Integra√ß√£o: ${this.calcularPorcentagem(this.resultados.integracao)}%`);
        console.log(`üß™ Confiabilidade: ${this.calcularPorcentagem(this.resultados.confiabilidade)}%`);
        
        console.log('\nüö® PROBLEMAS DETECTADOS:');
        this.listarProblemas();
        
        console.log('\nüí° RECOMENDA√á√ïES:');
        this.gerarRecomendacoes();
        
        console.log('\n‚è∞ Diagn√≥stico conclu√≠do em:', new Date().toLocaleString('pt-BR'));
        console.log('üìä ==========================================\n');
    },
    
    // Fun√ß√µes auxiliares
    participanteVeriaTarefa(tarefa, participante) {
        return tarefa.participantes?.includes(participante) || 
               tarefa.responsavel === participante ||
               tarefa.criadoPor === participante;
    },
    
    calcularPorcentagem(categoria) {
        const valores = Object.values(categoria).filter(v => typeof v === 'boolean');
        const positivos = valores.filter(v => v === true).length;
        return valores.length > 0 ? ((positivos / valores.length) * 100).toFixed(0) : 0;
    },
    
    listarProblemas() {
        const problemas = [];
        
        if (!this.resultados.usuarios.usuarioLogado) {
            problemas.push('‚ùå Nenhum usu√°rio logado');
        }
        
        if (!this.resultados.sincronizacao.firebaseConectado) {
            problemas.push('‚ö†Ô∏è Firebase offline - usando armazenamento local');
        }
        
        if (!this.resultados.armazenamento.firebase && !this.resultados.armazenamento.localStorage) {
            problemas.push('üö® CR√çTICO: Nenhum m√©todo de armazenamento funcionando!');
        }
        
        if (this.resultados.sincronizacao.tarefasCompartilhadas === 0) {
            problemas.push('‚ÑπÔ∏è Nenhuma tarefa com participantes para testar sincroniza√ß√£o');
        }
        
        if (problemas.length === 0) {
            console.log('   ‚úÖ Nenhum problema cr√≠tico detectado');
        } else {
            problemas.forEach(p => console.log(`   ${p}`));
        }
    },
    
    gerarRecomendacoes() {
        const recomendacoes = [];
        
        if (!this.resultados.sincronizacao.firebaseConectado) {
            recomendacoes.push('üîß Verificar conex√£o com Firebase ou credenciais');
        }
        
        if (this.resultados.confiabilidade.tempoResposta > 2000) {
            recomendacoes.push('‚ö° Otimizar performance - opera√ß√µes lentas detectadas');
        }
        
        if (!this.resultados.armazenamento.backupDisponivel) {
            recomendacoes.push('üíæ Considerar implementar backup autom√°tico adicional');
        }
        
        if (this.resultados.usuarios.totalUsuarios < 5) {
            recomendacoes.push('üë• Carregar lista completa de usu√°rios do Firebase');
        }
        
        if (recomendacoes.length === 0) {
            console.log('   üéâ Sistema funcionando otimamente!');
        } else {
            recomendacoes.forEach(r => console.log(`   ${r}`));
        }
    }
};

// üéØ COMANDOS GLOBAIS
window.diagnosticoBIAPO = () => DiagnosticoBIAPO.executarDiagnosticoCompleto();
window.testeRapido = async () => {
    console.log('üöÄ TESTE R√ÅPIDO DO SISTEMA...\n');
    
    // Verifica√ß√µes b√°sicas
    console.log('‚úì App inicializado?', App?.estadoSistema?.inicializado ? '‚úÖ' : '‚ùå');
    console.log('‚úì Auth funcionando?', Auth?.estaLogado() ? '‚úÖ' : '‚ùå');
    console.log('‚úì Firebase conectado?', App?.estadoSistema?.firebaseDisponivel ? '‚úÖ' : '‚ö†Ô∏è Offline');
    console.log('‚úì Calendar carregado?', Calendar?.state?.carregado ? '‚úÖ' : '‚ùå');
    console.log('‚úì Total tarefas:', App?.dados?.tarefas?.length || 0);
    console.log('‚úì Total eventos:', App?.dados?.eventos?.length || 0);
    
    const usuario = Auth?.obterUsuario();
    if (usuario) {
        console.log('\nüë§ Usu√°rio atual:');
        console.log('   Nome:', usuario.displayName);
        console.log('   Email:', usuario.email);
        console.log('   Admin:', usuario.admin ? 'SIM' : 'N√ÉO');
    }
};

console.log('üîç Sistema de Diagn√≥stico BIAPO carregado!');
console.log('üìã Comandos dispon√≠veis:');
console.log('   ‚Ä¢ diagnosticoBIAPO() - An√°lise completa (30 segundos)');
console.log('   ‚Ä¢ testeRapido() - Verifica√ß√£o b√°sica (instant√¢nea)');
