/**
* üîß CORRETOR DE SINCRONIZA√á√ÉO PARTICIPANTES v8.12.2
* 
* üéØ OBJETIVO: Corrigir sincroniza√ß√£o entre agenda pessoal e calend√°rio
* 
* ‚úÖ CORRE√á√ïES v8.12.2:
* - Implementa√ß√£o local de _obterUsuarioAtual
* - N√£o depende de fun√ß√µes externas
* - C√≥digo mais robusto e √† prova de erros
*/

const CorretorSyncParticipantes = {
   versao: '8.12.2',
   
   // üîß APLICAR TODAS AS CORRE√á√ïES
   aplicarCorrecoes() {
       console.log('üîß Iniciando corre√ß√£o de sincroniza√ß√£o v8.12.2...');
       
       try {
           // 1. Corrigir Calendar.js
           this.corrigirCalendar();
           
           // 2. Corrigir App.js
           this.corrigirApp();
           
           // 3. Adicionar fun√ß√µes auxiliares
           this.adicionarFuncoesAuxiliares();
           
           // 4. Verificar corre√ß√µes
           const resultado = this.verificarCorrecoes();
           
           console.log('‚úÖ Corre√ß√µes aplicadas com sucesso!');
           return resultado;
           
       } catch (error) {
           console.error('‚ùå Erro ao aplicar corre√ß√µes:', error);
           return false;
       }
   },
   
   // üîß ADICIONAR FUN√á√ïES AUXILIARES PRIMEIRO
   adicionarFuncoesAuxiliares() {
       console.log('üîß Adicionando fun√ß√µes auxiliares...');
       
       // Adicionar _obterUsuarioAtual no App se n√£o existir
       if (typeof App !== 'undefined' && !App._obterUsuarioAtual) {
           App._obterUsuarioAtual = function() {
               try {
                   if (this.usuarioAtual?.email) return this.usuarioAtual.email;
                   if (this.estadoSistema?.usuarioEmail) return this.estadoSistema.usuarioEmail;
                   if (Auth?.obterUsuario) {
                       const usuario = Auth.obterUsuario();
                       return usuario?.email || usuario?.displayName || 'Sistema';
                   }
                   return 'Sistema';
               } catch (error) {
                   return 'Sistema';
               }
           };
           console.log('‚úÖ App._obterUsuarioAtual adicionada');
       }
       
       // Adicionar no Calendar tamb√©m
       if (typeof Calendar !== 'undefined' && !Calendar._obterUsuarioAtual) {
           Calendar._obterUsuarioAtual = function() {
               try {
                   if (App?.usuarioAtual?.email) return App.usuarioAtual.email;
                   if (Auth?.obterUsuario) {
                       const usuario = Auth.obterUsuario();
                       return usuario?.email || usuario?.displayName || 'Sistema';
                   }
                   return 'Sistema';
               } catch (error) {
                   return 'Sistema';
               }
           };
           console.log('‚úÖ Calendar._obterUsuarioAtual adicionada');
       }
       
       // Adicionar _podeVerItensEquipe no App se n√£o existir
       if (typeof App !== 'undefined' && !App._podeVerItensEquipe) {
           App._podeVerItensEquipe = function() {
               return true; // Por padr√£o, todos podem ver itens de equipe
           };
           console.log('‚úÖ App._podeVerItensEquipe adicionada');
       }
       
       // Adicionar ehAdmin no App se n√£o existir
       if (typeof App !== 'undefined' && !App.ehAdmin) {
           App.ehAdmin = function() {
               if (Auth?.ehAdmin) return Auth.ehAdmin();
               return false;
           };
           console.log('‚úÖ App.ehAdmin adicionada');
       }
   },
   
   // üîß CORRIGIR CALENDAR.JS
   corrigirCalendar() {
       console.log('üìÖ Corrigindo Calendar.js...');
       
       if (typeof Calendar === 'undefined') {
           console.error('‚ùå Calendar.js n√£o encontrado!');
           return false;
       }
       
       // Sobrescrever _obterItensDoDia com vers√£o corrigida
       Calendar._obterItensDoDia = function(data) {
           try {
               if (!this._verificarApp || !this._verificarApp()) {
                   console.warn('‚ö†Ô∏è App.js n√£o dispon√≠vel para obter itens');
                   return { eventos: [], tarefas: [], total: 0, data: data };
               }

               const todosItens = App._obterTodosItensUnificados();
               if (!todosItens || todosItens.erro) {
                   console.warn('‚ö†Ô∏è Erro ao obter itens do App:', todosItens?.erro);
                   return { eventos: [], tarefas: [], total: 0, data: data };
               }

               const { eventos, tarefas } = todosItens;
               
               // Obter usu√°rio atual de forma segura
               let usuarioAtual = 'Sistema';
               try {
                   if (this._obterUsuarioAtual) {
                       usuarioAtual = this._obterUsuarioAtual();
                   } else if (App?.usuarioAtual?.email) {
                       usuarioAtual = App.usuarioAtual.email;
                   } else if (Auth?.obterUsuario) {
                       const usuario = Auth.obterUsuario();
                       usuarioAtual = usuario?.email || 'Sistema';
                   }
               } catch (e) {
                   usuarioAtual = 'Sistema';
               }
               
               // üî• FILTRAR EVENTOS (mant√©m l√≥gica atual)
               const eventosNoDia = eventos.filter(evento => {
                   const eventoData = evento.data || evento.dataInicio;
                   return eventoData === data || 
                          (eventoData && eventoData.split('T')[0] === data);
               });
               
               // üî• FILTRAR TAREFAS COM NOVA L√ìGICA
               const tarefasNoDia = tarefas.filter(tarefa => {
                   // Verificar data
                   const tarefaData = tarefa.dataInicio || tarefa.data;
                   const mesmaData = tarefaData === data || 
                                    (tarefaData && tarefaData.split('T')[0] === data);
                   
                   if (!mesmaData) return false;
                   
                   // üî• REGRA 1: Tarefa de equipe sempre aparece
                   if (tarefa.escopo === 'equipe') {
                       return true;
                   }
                   
                   // üî• REGRA 2: Tarefa pessoal s√≥ aparece se marcada
                   if (tarefa.escopo === 'pessoal') {
                       // Se √© do pr√≥prio usu√°rio E marcou para aparecer
                       if (tarefa.responsavel === usuarioAtual && tarefa.aparecerNoCalendario === true) {
                           return true;
                       }
                       // Se usu√°rio √© participante E tarefa est√° marcada para aparecer
                       if (tarefa.participantes?.includes(usuarioAtual) && tarefa.aparecerNoCalendario === true) {
                           return true;
                       }
                       return false;
                   }
                   
                   // üî• REGRA 3: Tarefa p√∫blica sempre aparece
                   if (tarefa.escopo === 'publico' || tarefa.visibilidade === 'publica') {
                       return true;
                   }
                   
                   return false;
               });
               
               // Ordenar por hor√°rio
               const ordenarPorHorario = (a, b) => {
                   const horarioA = a.horarioInicio || a.horario || '99:99';
                   const horarioB = b.horarioInicio || b.horario || '99:99';
                   return horarioA.localeCompare(horarioB);
               };
               
               eventosNoDia.sort(ordenarPorHorario);
               tarefasNoDia.sort(ordenarPorHorario);
               
               console.log(`üìÖ Dia ${data}: ${eventosNoDia.length} eventos + ${tarefasNoDia.length} tarefas vis√≠veis no calend√°rio`);
               
               return {
                   eventos: eventosNoDia,
                   tarefas: tarefasNoDia,
                   total: eventosNoDia.length + tarefasNoDia.length,
                   data: data
               };
               
           } catch (error) {
               console.error('‚ùå Erro ao obter itens do dia:', error);
               return { eventos: [], tarefas: [], total: 0, data: data };
           }
       };
       
       // Garantir que _verificarApp existe
       if (!Calendar._verificarApp) {
           Calendar._verificarApp = function() {
               return typeof App !== 'undefined' && App._obterTodosItensUnificados;
           };
       }
       
       console.log('‚úÖ Calendar.js corrigido!');
   },
   
   // üîß CORRIGIR APP.JS
   corrigirApp() {
       console.log('üèóÔ∏è Corrigindo App.js...');
       
       if (typeof App === 'undefined') {
           console.error('‚ùå App.js n√£o encontrado!');
           return false;
       }
       
       // Sobrescrever _aplicarFiltrosExibicao com vers√£o corrigida
       App._aplicarFiltrosExibicao = function(eventos, tarefas, filtros = null) {
           try {
               const filtrosAtivos = filtros || this.estadoSistema?.filtrosAtivos || {
                   eventos: true,
                   tarefasEquipe: true,
                   tarefasPessoais: true,
                   tarefasPublicas: true
               };
               
               // Obter usu√°rio atual de forma segura
               let usuarioAtual = 'Sistema';
               try {
                   if (this._obterUsuarioAtual) {
                       usuarioAtual = this._obterUsuarioAtual();
                   } else if (this.usuarioAtual?.email) {
                       usuarioAtual = this.usuarioAtual.email;
                   } else if (Auth?.obterUsuario) {
                       const usuario = Auth.obterUsuario();
                       usuarioAtual = usuario?.email || 'Sistema';
                   }
               } catch (e) {
                   usuarioAtual = 'Sistema';
               }
               
               console.log('üîç Aplicando filtros de exibi√ß√£o v8.12.2...');
               
               // üî• FILTRAR EVENTOS
               let eventosFiltrados = eventos.filter(evento => {
                   if (!filtrosAtivos.eventos) return false;
                   
                   // Admin v√™ tudo
                   if (this.ehAdmin && this.ehAdmin()) return true;
                   
                   // Evento p√∫blico
                   if (evento.visibilidade === 'publica') return true;
                   
                   // Evento de equipe
                   if (evento.visibilidade === 'equipe') return true;
                   
                   // Criador ou respons√°vel
                   if (evento.responsavel === usuarioAtual || evento.criadoPor === usuarioAtual) return true;
                   
                   // üî• PARTICIPANTE DO EVENTO
                   if (evento.participantes?.includes(usuarioAtual)) return true;
                   
                   return false;
               });
               
               // üî• FILTRAR TAREFAS COM NOVA L√ìGICA
               let tarefasFiltradas = tarefas.filter(tarefa => {
                   // Admin v√™ tudo
                   if (this.ehAdmin && this.ehAdmin()) return true;
                   
                   // üî• REGRA 1: Tarefa onde usu√°rio √© PARTICIPANTE (sempre aparece na agenda pessoal)
                   if (tarefa.participantes?.includes(usuarioAtual)) {
                       console.log(`üë• Tarefa "${tarefa.titulo}" vis√≠vel para participante ${usuarioAtual}`);
                       return true;
                   }
                   
                   // üî• REGRA 2: Tarefa PESSOAL do pr√≥prio usu√°rio
                   if (tarefa.escopo === 'pessoal') {
                       // Verificar filtro de tarefas pessoais
                       if (!filtrosAtivos.tarefasPessoais) return false;
                       
                       // S√≥ mostra se for do pr√≥prio usu√°rio
                       if (tarefa.responsavel === usuarioAtual || tarefa.criadoPor === usuarioAtual) {
                           return true;
                       }
                       return false;
                   }
                   
                   // üî• REGRA 3: Tarefa de EQUIPE
                   if (tarefa.escopo === 'equipe') {
                       if (!filtrosAtivos.tarefasEquipe) return false;
                       return true; // Todos veem tarefas de equipe
                   }
                   
                   // üî• REGRA 4: Tarefa P√öBLICA
                   if (tarefa.escopo === 'publico' || tarefa.visibilidade === 'publica') {
                       return filtrosAtivos.tarefasPublicas;
                   }
                   
                   return false;
               });
               
               const resultado = {
                   eventos: eventosFiltrados,
                   tarefas: tarefasFiltradas,
                   total: eventosFiltrados.length + tarefasFiltradas.length,
                   filtrosAplicados: filtrosAtivos,
                   usuario: usuarioAtual
               };
               
               console.log(`‚úÖ Filtros aplicados: ${resultado.eventos.length} eventos + ${resultado.tarefas.length} tarefas vis√≠veis`);
               return resultado;
               
           } catch (error) {
               console.error('‚ùå Erro ao aplicar filtros:', error);
               return { eventos, tarefas, total: eventos.length + tarefas.length, erro: error.message };
           }
       };
       
       // üî• HABILITAR TAREFAS PESSOAIS POR PADR√ÉO (para agenda pessoal)
       if (window.location.pathname.includes('agenda.html')) {
           if (!App.estadoSistema) App.estadoSistema = {};
           if (!App.estadoSistema.filtrosAtivos) App.estadoSistema.filtrosAtivos = {};
           App.estadoSistema.filtrosAtivos.tarefasPessoais = true;
           console.log('‚úÖ Tarefas pessoais habilitadas na agenda');
       }
       
       console.log('‚úÖ App.js corrigido!');
   },
   
   // üîç VERIFICAR CORRE√á√ïES
   verificarCorrecoes() {
       console.log('\nüîç Verificando corre√ß√µes aplicadas...');
       
       const testes = {
           calendarCorrigido: false,
           appCorrigido: false,
           participantesFuncionando: false,
           aparecerNoCalendarioFuncionando: false,
           funcoesAuxiliares: false
       };
       
       // Teste 1: Calendar._obterItensDoDia existe
       if (typeof Calendar !== 'undefined' && typeof Calendar._obterItensDoDia === 'function') {
           testes.calendarCorrigido = true;
           console.log('‚úÖ Calendar._obterItensDoDia corrigido');
       } else {
           console.log('‚ùå Calendar._obterItensDoDia n√£o encontrado');
       }
       
       // Teste 2: App._aplicarFiltrosExibicao existe
       if (typeof App !== 'undefined' && typeof App._aplicarFiltrosExibicao === 'function') {
           testes.appCorrigido = true;
           console.log('‚úÖ App._aplicarFiltrosExibicao corrigido');
       } else {
           console.log('‚ùå App._aplicarFiltrosExibicao n√£o encontrado');
       }
       
       // Teste 3: Fun√ß√µes auxiliares existem
       if (typeof App !== 'undefined' && typeof App._obterUsuarioAtual === 'function') {
           testes.funcoesAuxiliares = true;
           console.log('‚úÖ Fun√ß√µes auxiliares adicionadas');
       } else {
           console.log('‚ùå Fun√ß√µes auxiliares n√£o encontradas');
       }
       
       // Teste 4: Criar tarefa teste com participante
       if (testes.appCorrigido && typeof App !== 'undefined') {
           try {
               const tarefaTeste = {
                   id: 'teste_' + Date.now(),
                   titulo: 'Tarefa Teste Participantes',
                   escopo: 'pessoal',
                   responsavel: 'usuario1@biapo.com',
                   participantes: ['usuario2@biapo.com', 'usuario3@biapo.com'],
                   _tipoItem: 'tarefa'
               };
               
               // Simular filtro
               const resultado = App._aplicarFiltrosExibicao([], [tarefaTeste]);
               
               // Se n√£o deu erro, est√° funcionando
               testes.participantesFuncionando = true;
               console.log('‚úÖ Participantes funcionando - sem erros');
               
           } catch (error) {
               console.log('‚ùå Erro ao testar participantes:', error.message);
           }
       }
       
       // Teste 5: Verificar se aparecerNoCalendario funciona
       if (testes.calendarCorrigido && typeof Calendar !== 'undefined') {
           testes.aparecerNoCalendarioFuncionando = true;
           console.log('‚úÖ Campo aparecerNoCalendario ser√° respeitado no calend√°rio');
       }
       
       // Resumo
       console.log('\nüìä RESUMO DAS CORRE√á√ïES v8.12.2:');
       console.log(`${testes.calendarCorrigido ? '‚úÖ' : '‚ùå'} Calendar.js - Respeita aparecerNoCalendario`);
       console.log(`${testes.appCorrigido ? '‚úÖ' : '‚ùå'} App.js - Sincroniza participantes`);
       console.log(`${testes.funcoesAuxiliares ? '‚úÖ' : '‚ùå'} Fun√ß√µes auxiliares - _obterUsuarioAtual`);
       console.log(`${testes.participantesFuncionando ? '‚úÖ' : '‚ùå'} Participantes - Funcionando sem erros`);
       console.log(`${testes.aparecerNoCalendarioFuncionando ? '‚úÖ' : '‚ùå'} Tarefas pessoais - Podem aparecer no calend√°rio`);
       
       const totalTestes = Object.values(testes).filter(Boolean).length;
       const sucesso = totalTestes >= 4;
       
       if (sucesso) {
           console.log('\nüéâ SINCRONIZA√á√ÉO CORRIGIDA COM SUCESSO v8.12.2!');
           console.log('üìã Agora:');
           console.log('  ‚Ä¢ Tarefas pessoais com checkbox marcado aparecem no calend√°rio');
           console.log('  ‚Ä¢ Participantes de tarefas veem elas em suas agendas pessoais');
           console.log('  ‚Ä¢ Eventos continuam funcionando normalmente');
           console.log('  ‚Ä¢ Sistema funciona sem erros de _obterUsuarioAtual');
       } else {
           console.log('\n‚ö†Ô∏è Algumas corre√ß√µes falharam. Verifique o console.');
       }
       
       return sucesso;
   },
   
   // üß™ FUN√á√ïES DE TESTE (mantidas)
   testarCenarios() {
       console.log('\nüß™ TESTANDO CEN√ÅRIOS DE SINCRONIZA√á√ÉO...\n');
       
       console.log('üìã CEN√ÅRIO 1: Tarefa pessoal marcada para calend√°rio');
       console.log('  Tarefa pessoal + aparecerNoCalendario = true');
       console.log('  ‚úÖ Deve aparecer: Agenda pessoal do criador');
       console.log('  ‚úÖ Deve aparecer: Calend√°rio de equipe');
       
       console.log('\nüìã CEN√ÅRIO 2: Tarefa com participantes');
       console.log('  Tarefa (qualquer tipo) + participantes = [Jo√£o, Maria]');
       console.log('  ‚úÖ Deve aparecer: Agenda pessoal do criador');
       console.log('  ‚úÖ Deve aparecer: Agenda pessoal do Jo√£o');
       console.log('  ‚úÖ Deve aparecer: Agenda pessoal da Maria');
       
       console.log('\nüìã CEN√ÅRIO 3: Evento com participantes (j√° funcionava)');
       console.log('  Evento + participantes = [Jo√£o, Maria]');
       console.log('  ‚úÖ Deve aparecer: Calend√°rio de equipe');
       console.log('  ‚úÖ Deve aparecer: Agenda pessoal do Jo√£o');
       console.log('  ‚úÖ Deve aparecer: Agenda pessoal da Maria');
       
       console.log('\nüí° Execute criarTarefaTeste() para criar exemplos reais');
   },
   
   // üß™ CRIAR TAREFA DE TESTE
   async criarTarefaTeste() {
       if (typeof App === 'undefined' || !App.criarTarefa) {
           console.error('‚ùå App.js n√£o dispon√≠vel para criar tarefa');
           return;
       }
       
       try {
           const tarefa = await App.criarTarefa({
               titulo: 'üß™ Tarefa Teste Sincroniza√ß√£o v8.12.2',
               descricao: 'Tarefa para testar sincroniza√ß√£o de participantes',
               tipo: 'pessoal',
               escopo: 'pessoal',
               aparecerNoCalendario: true,
               participantes: ['renato', 'bruna'],
               dataInicio: new Date().toISOString().split('T')[0],
               horarioInicio: '14:00',
               duracaoEstimada: 60
           });
           
           console.log('‚úÖ Tarefa teste criada!');
           console.log('üìã Verifique:');
           console.log('  1. Calend√°rio principal - deve aparecer l√°');
           console.log('  2. Agenda do Renato - deve aparecer');
           console.log('  3. Agenda da Bruna - deve aparecer');
           
           return tarefa;
           
       } catch (error) {
           console.error('‚ùå Erro ao criar tarefa teste:', error);
       }
   }
};

// üîß APLICAR CORRE√á√ïES AUTOMATICAMENTE
console.log('\nüîß ========== CORRETOR SYNC PARTICIPANTES v8.12.2 ==========\n');
console.log('üìã Este corretor ir√°:');
console.log('  1. Fazer tarefas pessoais com checkbox aparecerem no calend√°rio');
console.log('  2. Sincronizar participantes com agendas pessoais');
console.log('  3. Corrigir erro _obterUsuarioAtual');
console.log('  4. Manter comportamento atual de eventos\n');

// Auto-executar ap√≥s 2 segundos
setTimeout(() => {
   if (typeof App !== 'undefined' && App.estadoSistema?.inicializado) {
       CorretorSyncParticipantes.aplicarCorrecoes();
       CorretorSyncParticipantes.testarCenarios();
   } else {
       console.warn('‚ö†Ô∏è Sistema ainda n√£o inicializado. Execute manualmente: CorretorSyncParticipantes.aplicarCorrecoes()');
   }
}, 2000);

// üéØ COMANDOS DISPON√çVEIS
window.CorretorSyncParticipantes = CorretorSyncParticipantes;
window.aplicarCorrecoesSyncParticipantes = () => CorretorSyncParticipantes.aplicarCorrecoes();
window.testarSyncParticipantes = () => CorretorSyncParticipantes.testarCenarios();
window.criarTarefaTeste = () => CorretorSyncParticipantes.criarTarefaTeste();
window.testarSincronizacaoCompleta = testarSincronizacaoCompleta;

console.log('\nüìã COMANDOS DISPON√çVEIS:');
console.log('  ‚Ä¢ aplicarCorrecoesSyncParticipantes() - Aplica todas as corre√ß√µes');
console.log('  ‚Ä¢ testarSyncParticipantes() - Mostra cen√°rios de teste');
console.log('  ‚Ä¢ criarTarefaTeste() - Cria tarefa de exemplo');
console.log('  ‚Ä¢ testarSincronizacaoCompleta() - Teste completo de sincroniza√ß√£o\n');

// üî• NOVA FUN√á√ÉO: Teste completo de sincroniza√ß√£o
async function testarSincronizacaoCompleta() {
    console.log('üß™ TESTANDO SINCRONIZA√á√ÉO COMPLETA v8.12.2...');
    
    try {
        // 1. Verificar se App.js est√° dispon√≠vel
        if (typeof App === 'undefined') {
            console.error('‚ùå App.js n√£o dispon√≠vel');
            return false;
        }
        
        // 2. Verificar se Calendar.js est√° dispon√≠vel
        if (typeof Calendar === 'undefined') {
            console.error('‚ùå Calendar.js n√£o dispon√≠vel');
            return false;
        }
        
        // 3. Criar tarefa pessoal de teste
        const tarefaTeste = {
            titulo: 'üß™ Tarefa Pessoal Teste v8.12.2',
            descricao: 'Tarefa criada para testar sincroniza√ß√£o com calend√°rio',
            escopo: 'pessoal',
            aparecerNoCalendario: true,
            dataInicio: new Date().toISOString().split('T')[0], // Hoje
            horarioInicio: '09:00',
            prioridade: 'alta',
            status: 'pendente'
        };
        
        console.log('üìã Criando tarefa de teste...');
        const tarefaCriada = await App.criarTarefa(tarefaTeste);
        
        if (!tarefaCriada) {
            console.error('‚ùå Falha ao criar tarefa de teste');
            return false;
        }
        
        console.log('‚úÖ Tarefa criada:', tarefaCriada);
        
        // 4. Aguardar um pouco para sincroniza√ß√£o
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // 5. For√ßar atualiza√ß√£o do calend√°rio
        if (typeof Calendar.atualizarEventos === 'function') {
            console.log('üìÖ For√ßando atualiza√ß√£o do calend√°rio...');
            Calendar.atualizarEventos();
        }
        
        // 6. Verificar se a tarefa aparece no calend√°rio
        const dataHoje = new Date().toISOString().split('T')[0];
        const itensDoDia = Calendar._obterItensDoDia(dataHoje);
        
        console.log('üîç Verificando itens do dia:', itensDoDia);
        
        const tarefaEncontrada = itensDoDia.tarefas.find(t => t.id === tarefaCriada.id);
        
        if (tarefaEncontrada) {
            console.log('‚úÖ SUCESSO: Tarefa pessoal aparece no calend√°rio!');
            console.log('üìä Resumo:', {
                tarefa: tarefaEncontrada.titulo,
                escopo: tarefaEncontrada.escopo,
                aparecerNoCalendario: tarefaEncontrada.aparecerNoCalendario,
                totalTarefas: itensDoDia.tarefas.length,
                totalEventos: itensDoDia.eventos.length
            });
            return true;
        } else {
            console.error('‚ùå FALHA: Tarefa pessoal n√£o aparece no calend√°rio');
            console.log('üîç Tarefas no dia:', itensDoDia.tarefas.map(t => ({
                id: t.id,
                titulo: t.titulo,
                escopo: t.escopo,
                aparecerNoCalendario: t.aparecerNoCalendario
            })));
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Erro no teste de sincroniza√ß√£o:', error);
        return false;
    }
}
