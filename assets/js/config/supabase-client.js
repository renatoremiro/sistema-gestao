// üîê CLIENTE SUPABASE SEGURO v2.0 - SEM CREDENCIAIS HARDCODED
// Arquivo: assets/js/config/supabase-client.js
// 
// üî• CORRE√á√ÉO CR√çTICA: Credenciais movidas para configura√ß√£o externa
// üõ°Ô∏è SEGURAN√áA: Nunca mais credenciais no c√≥digo fonte

// üîê SISTEMA DE CONFIGURA√á√ÉO SEGURA
class SupabaseConfig {
    constructor() {
        this.config = null;
        this.carregado = false;
    }

    // üîç CARREGAR CONFIGURA√á√ïES (m√∫ltiplas fontes)
    async carregarConfig() {
        console.log('üîê Carregando configura√ß√µes Supabase de forma segura...');

        // FONTE 1: Vari√°veis globais definidas no HTML (recomendado)
        if (window.SUPABASE_CONFIG) {
            console.log('‚úÖ Configura√ß√£o encontrada em window.SUPABASE_CONFIG');
            this.config = window.SUPABASE_CONFIG;
            this.carregado = true;
            return this.config;
        }

        // FONTE 2: Meta tags no HTML
        const urlMeta = document.querySelector('meta[name="supabase-url"]');
        const keyMeta = document.querySelector('meta[name="supabase-key"]');
        
        if (urlMeta && keyMeta) {
            console.log('‚úÖ Configura√ß√£o encontrada em meta tags');
            this.config = {
                url: urlMeta.content,
                key: keyMeta.content
            };
            this.carregado = true;
            return this.config;
        }

        // FONTE 3: Arquivo de configura√ß√£o (fallback)
        try {
            const response = await fetch('./config/supabase-runtime.json');
            if (response.ok) {
                this.config = await response.json();
                console.log('‚úÖ Configura√ß√£o carregada do arquivo JSON');
                this.carregado = true;
                return this.config;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Arquivo de configura√ß√£o n√£o encontrado');
        }

        // ERRO: Nenhuma configura√ß√£o encontrada
        const errorMsg = `
üö® ERRO CR√çTICO DE CONFIGURA√á√ÉO SUPABASE:

Nenhuma configura√ß√£o Supabase encontrada. Configure usando uma das op√ß√µes:

OP√á√ÉO 1 (Recomendada) - Vari√°vel global no HTML:
<script>
window.SUPABASE_CONFIG = {
    url: 'sua_url_aqui',
    key: 'sua_key_aqui'
};
</script>

OP√á√ÉO 2 - Meta tags no HTML:
<meta name="supabase-url" content="sua_url_aqui">
<meta name="supabase-key" content="sua_key_aqui">

OP√á√ÉO 3 - Arquivo config/supabase-runtime.json:
{
    "url": "sua_url_aqui",
    "key": "sua_key_aqui"
}

üîß Consulte o arquivo .env.example para obter as credenciais.
        `;
        
        console.error(errorMsg);
        throw new Error('Configura√ß√£o Supabase n√£o encontrada - consulte .env.example');
    }

    // üîç VALIDAR CONFIGURA√á√ïES
    validarConfig() {
        if (!this.config) {
            throw new Error('Configura√ß√£o n√£o carregada');
        }

        if (!this.config.url || !this.config.key) {
            throw new Error('URL ou KEY do Supabase n√£o fornecidos');
        }

        if (!this.config.url.includes('supabase.co')) {
            console.warn('‚ö†Ô∏è URL do Supabase parece inv√°lida');
        }

        if (this.config.key.length < 100) {
            console.warn('‚ö†Ô∏è Key do Supabase parece muito curta');
        }

        console.log('‚úÖ Configura√ß√£o Supabase validada');
        return true;
    }
}

// üöÄ CLIENTE SUPABASE OTIMIZADO E SEGURO
class SupabaseClient {
    constructor() {
        this.configManager = new SupabaseConfig();
        this.url = null;
        this.key = null;
        this.headers = null;
        this.conectado = false;
        this.cache = new Map();
        this.inicializado = false;
        
        console.log('üöÄ Inicializando Supabase Client Seguro v2.0...');
        this.inicializar();
    }

    // üîß INICIALIZA√á√ÉO SEGURA v2.1
    async inicializar() {
        try {
            // Aguardar configura√ß√£o segura externa
            if (!window.SUPABASE_CONFIG && window.configurarSupabaseSeguro) {
                console.log('üîê Carregando configura√ß√£o segura...');
                await window.configurarSupabaseSeguro();
            }
            
            // Carregar e validar configura√ß√µes
            await this.configManager.carregarConfig();
            this.configManager.validarConfig();
            
            // Configurar cliente
            this.url = this.configManager.config.url;
            this.key = this.configManager.config.key;
            this.headers = {
                'apikey': this.key,
                'Authorization': `Bearer ${this.key}`,
                'Content-Type': 'application/json',
                'Prefer': 'return=representation'
            };
            
            this.inicializado = true;
            console.log('‚úÖ Supabase Client inicializado com seguran√ßa!');
            
            // Testar conex√£o
            await this.testarConexao();
            
        } catch (error) {
            console.error('‚ùå Erro na inicializa√ß√£o do Supabase Client:', error);
            this.inicializado = false;
            
            // Mostrar instru√ß√µes de configura√ß√£o
            this._mostrarInstrucoesConfiguracao();
        }
    }

    // üìã MOSTRAR INSTRU√á√ïES DE CONFIGURA√á√ÉO
    _mostrarInstrucoesConfiguracao() {
        const instrucoes = `
üîß COMO CONFIGURAR O SUPABASE:

1. Copie o arquivo .env.example para obter o template
2. Acesse seu painel Supabase em https://supabase.com/dashboard
3. V√° em Settings > API e copie URL e anon key
4. Configure usando uma das op√ß√µes abaixo:

M√âTODO 1 (Recomendado) - No HTML antes do script:
<script>
window.SUPABASE_CONFIG = {
    url: 'https://seu-projeto.supabase.co',
    key: 'sua-chave-anonima-aqui'
};
</script>
<script src="assets/js/config/supabase-client.js"></script>

M√âTODO 2 - Via meta tags:
<meta name="supabase-url" content="https://seu-projeto.supabase.co">
<meta name="supabase-key" content="sua-chave-anonima-aqui">
        `;
        
        console.log(instrucoes);
        
        // Criar alerta visual se poss√≠vel
        if (typeof document !== 'undefined' && document.body) {
            const alert = document.createElement('div');
            alert.style.cssText = `
                position: fixed;
                top: 20px;
                left: 20px;
                right: 20px;
                background: #fee2e2;
                border: 2px solid #dc2626;
                color: #dc2626;
                padding: 20px;
                border-radius: 8px;
                z-index: 9999;
                font-family: monospace;
                font-size: 12px;
                white-space: pre-wrap;
                max-height: 300px;
                overflow-y: auto;
            `;
            alert.textContent = 'üö® CONFIGURA√á√ÉO SUPABASE NECESS√ÅRIA\n\nConsulte o console (F12) para instru√ß√µes detalhadas.\n\nArquivo: .env.example';
            
            // Bot√£o para fechar
            const closeBtn = document.createElement('button');
            closeBtn.textContent = '‚úï';
            closeBtn.style.cssText = 'position: absolute; top: 10px; right: 15px; background: none; border: none; font-size: 18px; cursor: pointer;';
            closeBtn.onclick = () => alert.remove();
            alert.appendChild(closeBtn);
            
            document.body.appendChild(alert);
        }
    }

    // üîå TESTE DE CONEX√ÉO
    async testarConexao() {
        if (!this.inicializado) {
            console.warn('‚ö†Ô∏è Cliente n√£o inicializado, n√£o √© poss√≠vel testar conex√£o');
            return false;
        }

        try {
            const response = await fetch(`${this.url}/rest/v1/usuarios?select=count`, {
                method: 'GET',
                headers: this.headers
            });

            if (response.ok) {
                this.conectado = true;
                console.log('‚úÖ Supabase conectado com sucesso!');
                console.log(`üåç Servidor: ${this.url}`);
                return true;
            } else {
                throw new Error(`Erro ${response.status}: ${response.statusText}`);
            }

        } catch (error) {
            console.error('‚ùå Erro na conex√£o Supabase:', error);
            this.conectado = false;
            return false;
        }
    }

    // üõ°Ô∏è VERIFICAR SE EST√Å PRONTO
    _verificarPronto() {
        if (!this.inicializado) {
            throw new Error('Supabase Client n√£o inicializado - configure as credenciais');
        }
        if (!this.conectado) {
            console.warn('‚ö†Ô∏è Supabase n√£o conectado - opera√ß√£o pode falhar');
        }
    }

    // üì• BUSCAR DADOS
    async buscar(tabela, filtros = {}) {
        this._verificarPronto();
        
        try {
            let url = `${this.url}/rest/v1/${tabela}?select=*`;
            
            // Aplicar filtros
            Object.entries(filtros).forEach(([chave, valor]) => {
                url += `&${chave}=eq.${encodeURIComponent(valor)}`;
            });

            const response = await fetch(url, {
                method: 'GET',
                headers: this.headers
            });

            if (!response.ok) {
                throw new Error(`Erro ${response.status}: ${response.statusText}`);
            }

            const dados = await response.json();
            console.log(`üì• ${dados.length} registros de ${tabela}`);
            return dados;

        } catch (error) {
            console.error(`‚ùå Erro ao buscar ${tabela}:`, error);
            return [];
        }
    }

    // üíæ INSERIR DADOS
    async inserir(tabela, dados) {
        this._verificarPronto();
        
        try {
            const response = await fetch(`${this.url}/rest/v1/${tabela}`, {
                method: 'POST',
                headers: this.headers,
                body: JSON.stringify(dados)
            });

            if (!response.ok) {
                const erro = await response.text();
                throw new Error(`Erro ${response.status}: ${erro}`);
            }

            const resultado = await response.json();
            console.log(`‚úÖ Inserido em ${tabela}:`, resultado[0]?.id);
            return resultado[0];

        } catch (error) {
            console.error(`‚ùå Erro ao inserir em ${tabela}:`, error);
            throw error;
        }
    }

    // üîÑ UPSERT (inserir ou atualizar)
    async upsert(tabela, dados) {
        this._verificarPronto();
        
        try {
            const response = await fetch(`${this.url}/rest/v1/${tabela}`, {
                method: 'POST',
                headers: {
                    ...this.headers,
                    'Prefer': 'resolution=merge-duplicates,return=representation'
                },
                body: JSON.stringify(dados)
            });

            if (!response.ok) {
                const erro = await response.text();
                throw new Error(`Erro ${response.status}: ${erro}`);
            }

            const resultado = await response.json();
            console.log(`‚úÖ Upsert em ${tabela}:`, resultado[0]?.id);
            return resultado[0];

        } catch (error) {
            console.error(`‚ùå Erro ao fazer upsert em ${tabela}:`, error);
            throw error;
        }
    }

    // üìä M√âTODOS ESPEC√çFICOS PARA O SISTEMA (mantidos)

    // üë• BUSCAR OU CRIAR USU√ÅRIO
    async buscarOuCriarUsuario(email, nome) {
        this._verificarPronto();
        
        try {
            let usuarios = await this.buscar('usuarios', { email: email });
            
            if (usuarios.length > 0) {
                console.log(`üë§ Usu√°rio encontrado: ${email}`);
                return usuarios[0];
            }

            const novoUsuario = await this.inserir('usuarios', {
                email: email,
                nome: nome || email.split('@')[0],
                perfil: email.includes('biapo.com.br') ? 'admin' : 'usuario',
                admin: email === 'renatoremiro@biapo.com.br'
            });

            console.log(`üë§ Novo usu√°rio criado: ${email}`);
            return novoUsuario;

        } catch (error) {
            console.error('‚ùå Erro ao buscar/criar usu√°rio:', error);
            throw error;
        }
    }

    // üìÖ CARREGAR EVENTOS DO USU√ÅRIO
    async carregarEventosUsuario(usuarioId) {
        this._verificarPronto();
        
        try {
            const url = `${this.url}/rest/v1/eventos_completos?or=(criado_por.eq.${usuarioId},responsavel.eq.${usuarioId},visibilidade.eq.publica)&order=data.asc`;
            
            const response = await fetch(url, {
                method: 'GET',
                headers: this.headers
            });

            if (!response.ok) {
                throw new Error(`Erro ${response.status}`);
            }

            const eventos = await response.json();
            console.log(`üìÖ ${eventos.length} eventos carregados`);
            return eventos;

        } catch (error) {
            console.error('‚ùå Erro ao carregar eventos:', error);
            return [];
        }
    }

    // üìã CARREGAR TAREFAS DO USU√ÅRIO
    async carregarTarefasUsuario(usuarioId) {
        this._verificarPronto();
        
        try {
            const url = `${this.url}/rest/v1/tarefas_completas?or=(criado_por.eq.${usuarioId},responsavel.eq.${usuarioId})&order=data_inicio.asc`;
            
            const response = await fetch(url, {
                method: 'GET',
                headers: this.headers
            });

            if (!response.ok) {
                throw new Error(`Erro ${response.status}`);
            }

            const tarefas = await response.json();
            console.log(`üìã ${tarefas.length} tarefas carregadas`);
            return tarefas;

        } catch (error) {
            console.error('‚ùå Erro ao carregar tarefas:', error);
            return [];
        }
    }

    // üöÄ CARREGAR TODOS OS DADOS DO USU√ÅRIO
    async carregarDadosCompletos(email) {
        this._verificarPronto();
        
        try {
            console.log(`üì° Carregando dados completos para: ${email}`);

            const usuario = await this.buscarOuCriarUsuario(email);
            
            if (!usuario) {
                throw new Error('Falha ao obter usu√°rio');
            }

            const [eventos, tarefas] = await Promise.all([
                this.carregarEventosUsuario(usuario.id),
                this.carregarTarefasUsuario(usuario.id)
            ]);

            const dados = {
                usuario: usuario,
                eventos: eventos || [],
                tarefas: tarefas || [],
                timestamp: Date.now()
            };

            console.log(`‚úÖ Dados completos carregados: ${dados.eventos.length} eventos, ${dados.tarefas.length} tarefas`);
            return dados;

        } catch (error) {
            console.error('‚ùå Erro ao carregar dados completos:', error);
            throw error;
        }
    }

    // üìä ESTAT√çSTICAS
    async obterEstatisticas() {
        this._verificarPronto();
        
        try {
            const [usuarios, eventos, tarefas] = await Promise.all([
                this.buscar('usuarios'),
                this.buscar('eventos'),
                this.buscar('tarefas')
            ]);

            return {
                usuarios: usuarios.length,
                eventos: eventos.length,
                tarefas: tarefas.length,
                conectado: this.conectado,
                inicializado: this.inicializado,
                servidor: this.url
            };

        } catch (error) {
            console.error('‚ùå Erro ao obter estat√≠sticas:', error);
            return { 
                usuarios: 0, 
                eventos: 0, 
                tarefas: 0, 
                conectado: false,
                inicializado: this.inicializado,
                erro: error.message 
            };
        }
    }

    // üìä STATUS PARA DEBUG
    obterStatus() {
        return {
            inicializado: this.inicializado,
            conectado: this.conectado,
            url: this.url ? this.url.substring(0, 30) + '...' : 'n√£o configurado',
            keyConfigured: !!this.key,
            configSource: this.configManager.carregado ? 'carregado' : 'n√£o carregado'
        };
    }
}

// üöÄ INICIALIZA√á√ÉO GLOBAL SEGURA
let supabaseClient = null;

// Aguardar carregamento do DOM para inicializar
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        supabaseClient = new SupabaseClient();
        window.supabaseClient = supabaseClient;
        window.supabase = supabaseClient; // Alias
    });
} else {
    // DOM j√° carregado
    supabaseClient = new SupabaseClient();
    window.supabaseClient = supabaseClient;
    window.supabase = supabaseClient; // Alias
}

// üß™ FUN√á√ïES DE TESTE GLOBAIS
window.testarSupabase = () => {
    if (!supabaseClient) {
        console.error('‚ùå Supabase Client n√£o inicializado ainda');
        return false;
    }
    return supabaseClient.testarConexao();
};

window.estatisticasSupabase = () => {
    if (!supabaseClient) {
        console.error('‚ùå Supabase Client n√£o inicializado ainda');
        return null;
    }
    return supabaseClient.obterEstatisticas();
};

window.carregarDadosSupabase = (email) => {
    if (!supabaseClient) {
        console.error('‚ùå Supabase Client n√£o inicializado ainda');
        return null;
    }
    return supabaseClient.carregarDadosCompletos(email);
};

window.statusSupabase = () => {
    if (!supabaseClient) {
        return { inicializado: false, erro: 'Cliente n√£o criado ainda' };
    }
    return supabaseClient.obterStatus();
};

console.log('üîê Supabase Client Seguro v2.0 carregado!');
console.log('üß™ Comandos: testarSupabase() | estatisticasSupabase() | statusSupabase()');
console.log('üìã Configure usando window.SUPABASE_CONFIG ou meta tags');
console.log('üîß Consulte .env.example para instru√ß√µes detalhadas');

/*
üîê CONFIGURA√á√ÉO SEGURA v2.0:

‚úÖ CREDENCIAIS PROTEGIDAS:
- Nunca mais hardcoded no c√≥digo
- M√∫ltiplas fontes de configura√ß√£o
- Valida√ß√£o autom√°tica
- Instru√ß√µes claras de setup

üõ°Ô∏è SEGURAN√áA IMPLEMENTADA:
- Verifica√ß√µes de configura√ß√£o
- Alertas visuais se mal configurado
- Logs detalhados para debug
- Fallbacks seguros

üöÄ USO RECOMENDADO:
1. Configure window.SUPABASE_CONFIG no HTML
2. Ou use meta tags
3. Ou crie arquivo config/supabase-runtime.json
4. Teste com testarSupabase()
*/