/**
 * üìÖ Sistema de Calend√°rio v8.8.0 - INTEGRA√á√ÉO UNIFICADA COMPLETA
 * 
 * üî• FASE 2 - CALENDAR.JS INTEGRADO:
 * - ‚úÖ Mostra eventos + tarefas com estrutura unificada
 * - ‚úÖ Filtros visuais para diferentes tipos de itens
 * - ‚úÖ Cores espec√≠ficas por escopo e tipo
 * - ‚úÖ Click handlers diferenciados
 * - ‚úÖ Toggle para mostrar/ocultar tarefas pessoais
 * - ‚úÖ Integra√ß√£o perfeita com App.js v8.7.0
 */

const Calendar = {
    // ‚úÖ CONFIGURA√á√ïES UNIFICADAS v8.8.0
    config: {
        DIAS_SEMANA: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S√°b'],
        MESES: [
            'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
            'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
        ],
        
        // üî• CONTROLES DE EXIBI√á√ÉO UNIFICADOS
        mostrarEventos: true,           // Sempre mostrar eventos
        mostrarTarefasEquipe: true,     // Tarefas de equipe
        mostrarTarefasPessoais: false,  // Tarefas pessoais (toggle)
        mostrarTarefasPublicas: true,   // Tarefas p√∫blicas
        
        // üî• CORES UNIFICADAS POR TIPO E ESCOPO v8.8.0
        coresUnificadas: {
            // Eventos (sempre escopo equipe/publico)
            'evento-equipe': '#3b82f6',     // üîµ Azul - Eventos de equipe
            'evento-publico': '#06b6d4',    // üîµ Ciano - Eventos p√∫blicos
            
            // Tarefas por escopo
            'tarefa-pessoal': '#f59e0b',    // üü° Amarelo - Tarefas pessoais
            'tarefa-equipe': '#8b5cf6',     // üü£ Roxo - Tarefas de equipe
            'tarefa-publico': '#10b981',    // üü¢ Verde - Tarefas p√∫blicas
            
            // Estados especiais
            'hoje': '#ef4444',              // üî¥ Vermelho - Item de hoje
            'atrasado': '#dc2626',          // üî¥ Vermelho escuro - Atrasado
            'concluido': '#22c55e',         // ‚úÖ Verde claro - Conclu√≠do
            'cancelado': '#6b7280'          // ‚ö´ Cinza - Cancelado
        },
        
        // üî• √çCONES POR TIPO
        iconesUnificados: {
            'evento': 'üìÖ',
            'tarefa': 'üìã',
            'evento-reuniao': 'üë•',
            'evento-entrega': 'üì¶',
            'evento-prazo': '‚è∞',
            'tarefa-urgente': 'üö®',
            'tarefa-pessoal': 'üë§',
            'tarefa-equipe': 'üë•'
        }
    },

    // ‚úÖ ESTADO UNIFICADO v8.8.0
    state: {
        mesAtual: new Date().getMonth(),
        anoAtual: new Date().getFullYear(),
        diaSelecionado: new Date().getDate(),
        carregado: false,
        
        // üî• FILTROS E CONFIGURA√á√ïES DE EXIBI√á√ÉO
        filtrosAtivos: {
            eventos: true,
            tarefasEquipe: true,
            tarefasPessoais: false,
            tarefasPublicas: true
        },
        
        // Cache para performance
        itensCache: null,
        ultimaAtualizacaoCache: null,
        
        // Estat√≠sticas
        estatisticas: {
            totalEventos: 0,
            totalTarefas: 0,
            itensVisiveisHoje: 0,
            itensVisiveis: 0
        }
    },

    // ‚úÖ INICIALIZAR UNIFICADO v8.8.0
    inicializar() {
        try {
            const hoje = new Date();
            this.state.mesAtual = hoje.getMonth();
            this.state.anoAtual = hoje.getFullYear();
            this.state.diaSelecionado = hoje.getDate();
            
            // ‚úÖ Aguardar App.js v8.7.0 estar pronto
            this._aguardarAppUnificado().then(() => {
                this.gerar();
                this.state.carregado = true;
                this._atualizarEstatisticas();
                console.log('üìÖ Calendar v8.8.0 inicializado (Integra√ß√£o Unificada App.js v8.7.0)');
            });
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar calend√°rio unificado:', error);
            this.gerar(); // Fallback
        }
    },

    // ‚úÖ AGUARDAR APP.JS UNIFICADO ESTAR PRONTO
    async _aguardarAppUnificado() {
        let tentativas = 0;
        const maxTentativas = 50; // 5 segundos
        
        while (tentativas < maxTentativas) {
            if (typeof App !== 'undefined' && 
                App.estadoSistema && 
                App.estadoSistema.inicializado &&
                App.config.estruturaUnificada) {
                console.log('‚úÖ App.js v8.7.0 ESTRUTURA UNIFICADA pronto - Calendar pode carregar');
                return true;
            }
            
            await new Promise(resolve => setTimeout(resolve, 100));
            tentativas++;
        }
        
        console.warn('‚ö†Ô∏è App.js unificado n√£o carregou completamente, continuando...');
        return false;
    },

    // üî• OBTER TODOS OS ITENS UNIFICADOS (eventos + tarefas)
    _obterTodosItensUnificados() {
        try {
            if (typeof App === 'undefined' || !App.obterItensParaCalendario) {
                console.warn('‚ö†Ô∏è App.js unificado n√£o dispon√≠vel');
                return { eventos: [], tarefas: [], total: 0 };
            }

            // ‚úÖ USAR FUN√á√ÉO UNIFICADA DO APP.JS v8.7.0
            const { eventos, tarefas } = App.obterItensParaCalendario();
            
            console.log(`üìä Itens unificados carregados: ${eventos.length} eventos + ${tarefas.length} tarefas`);
            
            return { eventos, tarefas, total: eventos.length + tarefas.length };
            
        } catch (error) {
            console.error('‚ùå Erro ao obter itens unificados:', error);
            return { eventos: [], tarefas: [], total: 0 };
        }
    },

    // üî• APLICAR FILTROS DE EXIBI√á√ÉO v8.8.0
    _aplicarFiltrosExibicao(eventos, tarefas) {
        let eventosVisiveis = [];
        let tarefasVisiveis = [];
        
        // ‚úÖ FILTRAR EVENTOS
        if (this.state.filtrosAtivos.eventos) {
            eventosVisiveis = eventos.filter(evento => {
                // Sempre mostrar eventos (s√£o sempre relevantes para a equipe)
                return true;
            });
        }
        
        // ‚úÖ FILTRAR TAREFAS POR ESCOPO
        tarefasVisiveis = tarefas.filter(tarefa => {
            const escopo = tarefa.escopo || 'pessoal';
            
            if (escopo === 'pessoal' && this.state.filtrosAtivos.tarefasPessoais) {
                return true;
            }
            
            if (escopo === 'equipe' && this.state.filtrosAtivos.tarefasEquipe) {
                return true;
            }
            
            if (escopo === 'publico' && this.state.filtrosAtivos.tarefasPublicas) {
                return true;
            }
            
            return false;
        });
        
        return { 
            eventos: eventosVisiveis, 
            tarefas: tarefasVisiveis,
            total: eventosVisiveis.length + tarefasVisiveis.length
        };
    },

    // üî• ATUALIZAR EVENTOS/TAREFAS (fun√ß√£o principal de sync)
    atualizarEventos() {
        try {
            console.log('üìÖ Calendar: Atualizando itens unificados via App.js v8.7.0...');
            
            // Invalidar cache
            this.state.itensCache = null;
            this.state.ultimaAtualizacaoCache = null;
            
            // Regenerar o grid
            this._gerarDias();
            this._atualizarEstatisticas();
            
            console.log('‚úÖ Calendar unificado atualizado');
        } catch (error) {
            console.error('‚ùå Erro ao atualizar calendar unificado:', error);
            this.gerar(); // Fallback completo
        }
    },

    // üî• TOGGLE TAREFAS PESSOAIS
    toggleTarefasPessoais() {
        this.state.filtrosAtivos.tarefasPessoais = !this.state.filtrosAtivos.tarefasPessoais;
        this.config.mostrarTarefasPessoais = this.state.filtrosAtivos.tarefasPessoais;
        
        console.log(`üìã Tarefas pessoais no calend√°rio: ${this.state.filtrosAtivos.tarefasPessoais ? 'Ativadas' : 'Desativadas'}`);
        
        // Atualizar checkbox na interface
        const toggle = document.getElementById('toggleTarefasPessoais');
        if (toggle) {
            toggle.checked = this.state.filtrosAtivos.tarefasPessoais;
        }
        
        this._gerarDias(); // Regerar apenas os dias
        this._atualizarEstatisticas();
    },

    // üî• TOGGLE TAREFAS DE EQUIPE
    toggleTarefasEquipe() {
        this.state.filtrosAtivos.tarefasEquipe = !this.state.filtrosAtivos.tarefasEquipe;
        this.config.mostrarTarefasEquipe = this.state.filtrosAtivos.tarefasEquipe;
        
        console.log(`üë• Tarefas de equipe no calend√°rio: ${this.state.filtrosAtivos.tarefasEquipe ? 'Ativadas' : 'Desativadas'}`);
        
        // Atualizar checkbox na interface
        const toggle = document.getElementById('toggleTarefasEquipe');
        if (toggle) {
            toggle.checked = this.state.filtrosAtivos.tarefasEquipe;
        }
        
        this._gerarDias();
        this._atualizarEstatisticas();
    },

    // ‚úÖ GERAR CALEND√ÅRIO UNIFICADO v8.8.0
    gerar() {
        try {
            const container = document.getElementById('calendario');
            if (!container) return;

            container.innerHTML = '';
            container.style.cssText = `
                background: white !important;
                border-radius: 8px !important;
                overflow: hidden !important;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1) !important;
                width: 100% !important;
                display: block !important;
                position: relative !important;
            `;

            const mesNome = this.config.MESES[this.state.mesAtual];
            const { eventos, tarefas, total } = this._obterTodosItensUnificados();
            const { eventos: eventosVisiveis, tarefas: tarefasVisiveis, total: totalVisiveis } = this._aplicarFiltrosExibicao(eventos, tarefas);
            
            // üî• HEADER UNIFICADO COM CONTROLES
            const htmlCabecalho = `
                <div style="
                    background: linear-gradient(135deg, #C53030 0%, #9B2C2C 100%) !important;
                    color: white !important;
                    padding: 16px 20px !important;
                    display: flex !important;
                    justify-content: space-between !important;
                    align-items: center !important;
                ">
                    <button onclick="Calendar.mesAnterior()" style="
                        background: rgba(255,255,255,0.2) !important;
                        border: 1px solid rgba(255,255,255,0.3) !important;
                        color: white !important;
                        padding: 8px 12px !important;
                        border-radius: 6px !important;
                        cursor: pointer !important;
                        font-size: 14px !important;
                        font-weight: 500 !important;
                    ">‚Üê Anterior</button>
                    
                    <div style="text-align: center;">
                        <h3 style="
                            margin: 0 !important;
                            font-size: 18px !important;
                            font-weight: 600 !important;
                            color: white !important;
                        ">
                            üìÖ ${mesNome} ${this.state.anoAtual}
                        </h3>
                        <div style="
                            display: flex;
                            align-items: center;
                            gap: 8px;
                            margin-top: 8px;
                            justify-content: center;
                            flex-wrap: wrap;
                        ">
                            <small style="
                                font-size: 10px !important;
                                opacity: 0.8 !important;
                                color: white !important;
                            ">
                                üìä ${eventos.length} eventos | ${tarefas.length} tarefas | ${totalVisiveis} vis√≠veis
                            </small>
                            
                            <!-- üî• CONTROLES DE FILTRO UNIFICADOS -->
                            <div style="display: flex; gap: 12px; align-items: center; margin-top: 4px;">
                                
                                <!-- Toggle Tarefas de Equipe -->
                                <label style="
                                    display: flex;
                                    align-items: center;
                                    gap: 4px;
                                    font-size: 10px;
                                    opacity: 0.9;
                                    cursor: pointer;
                                    background: rgba(255,255,255,0.1);
                                    padding: 3px 6px;
                                    border-radius: 10px;
                                    border: 1px solid rgba(255,255,255,0.2);
                                ">
                                    <input type="checkbox" 
                                           id="toggleTarefasEquipe" 
                                           ${this.state.filtrosAtivos.tarefasEquipe ? 'checked' : ''}
                                           onchange="Calendar.toggleTarefasEquipe()"
                                           style="margin: 0; width: 10px; height: 10px; accent-color: #8b5cf6;">
                                    <span>üü£ Equipe</span>
                                </label>
                                
                                <!-- Toggle Tarefas Pessoais -->
                                <label style="
                                    display: flex;
                                    align-items: center;
                                    gap: 4px;
                                    font-size: 10px;
                                    opacity: 0.9;
                                    cursor: pointer;
                                    background: rgba(255,255,255,0.1);
                                    padding: 3px 6px;
                                    border-radius: 10px;
                                    border: 1px solid rgba(255,255,255,0.2);
                                ">
                                    <input type="checkbox" 
                                           id="toggleTarefasPessoais" 
                                           ${this.state.filtrosAtivos.tarefasPessoais ? 'checked' : ''}
                                           onchange="Calendar.toggleTarefasPessoais()"
                                           style="margin: 0; width: 10px; height: 10px; accent-color: #f59e0b;">
                                    <span>üü° Pessoais</span>
                                </label>
                                
                                <!-- Link para Agenda -->
                                <button onclick="abrirMinhaAgendaUnificada()" style="
                                    background: rgba(255,255,255,0.15);
                                    border: 1px solid rgba(255,255,255,0.3);
                                    color: white;
                                    padding: 3px 8px;
                                    border-radius: 10px;
                                    font-size: 9px;
                                    cursor: pointer;
                                    font-weight: 600;
                                ">üìã Minha Agenda</button>
                                
                            </div>
                        </div>
                    </div>
                    
                    <button onclick="Calendar.proximoMes()" style="
                        background: rgba(255,255,255,0.2) !important;
                        border: 1px solid rgba(255,255,255,0.3) !important;
                        color: white !important;
                        padding: 8px 12px !important;
                        border-radius: 6px !important;
                        cursor: pointer !important;
                        font-size: 14px !important;
                        font-weight: 500 !important;
                    ">Pr√≥ximo ‚Üí</button>
                </div>
            `;

            // Dias da semana
            const htmlDiasSemana = `
                <div style="
                    display: grid !important;
                    grid-template-columns: repeat(7, 1fr) !important;
                    background: #f8fafc !important;
                ">
                    ${this.config.DIAS_SEMANA.map(dia => `
                        <div style="
                            padding: 12px 8px !important;
                            text-align: center !important;
                            font-weight: 600 !important;
                            font-size: 14px !important;
                            color: #374151 !important;
                            border-right: 1px solid #e5e7eb !important;
                            border-bottom: 1px solid #e5e7eb !important;
                            background: #f8fafc !important;
                        ">${dia}</div>
                    `).join('')}
                </div>
            `;

            const htmlGrid = `
                <div id="calendario-dias-grid" style="
                    display: grid !important;
                    grid-template-columns: repeat(7, 1fr) !important;
                    background: white !important;
                "></div>
            `;

            container.innerHTML = htmlCabecalho + htmlDiasSemana + htmlGrid;
            this._gerarDias();
            
        } catch (error) {
            console.error('‚ùå Erro ao gerar calend√°rio unificado:', error);
        }
    },

    // üî• GERAR DIAS COM ITENS UNIFICADOS v8.8.0
    _gerarDias() {
        const grid = document.getElementById('calendario-dias-grid');
        if (!grid) return;

        const primeiroDia = new Date(this.state.anoAtual, this.state.mesAtual, 1);
        const ultimoDia = new Date(this.state.anoAtual, this.state.mesAtual + 1, 0);
        const diaSemanaInicio = primeiroDia.getDay();
        const totalDias = ultimoDia.getDate();
        const hoje = new Date();

        // ‚úÖ OBTER DADOS UNIFICADOS DO APP v8.7.0
        const { eventos, tarefas } = this._obterTodosItensUnificados();
        const { eventos: eventosVisiveis, tarefas: tarefasVisiveis } = this._aplicarFiltrosExibicao(eventos, tarefas);

        grid.innerHTML = '';

        // Gerar 42 c√©lulas (6 semanas x 7 dias)
        for (let celula = 0; celula < 42; celula++) {
            const dia = celula - diaSemanaInicio + 1;
            
            if (dia < 1 || dia > totalDias) {
                // C√©lula vazia
                const celulaVazia = document.createElement('div');
                celulaVazia.style.cssText = `
                    border-right: 1px solid #e5e7eb !important;
                    border-bottom: 1px solid #e5e7eb !important;
                    background: #f9fafb !important;
                    min-height: 120px !important;
                `;
                grid.appendChild(celulaVazia);
            } else {
                // C√©lula com dia v√°lido
                const celulaDia = this._criarCelulaDiaUnificada(dia, hoje, eventosVisiveis, tarefasVisiveis);
                grid.appendChild(celulaDia);
            }
        }
    },

    // üî• CRIAR C√âLULA DO DIA UNIFICADA v8.8.0
    _criarCelulaDiaUnificada(dia, hoje, eventos, tarefas) {
        const celula = document.createElement('div');
        
        const dataCelula = new Date(this.state.anoAtual, this.state.mesAtual, dia);
        const dataISO = dataCelula.toISOString().split('T')[0];
        const ehHoje = this._ehMesmoMesDia(dataCelula, hoje);
        const ehSelecionado = dia === this.state.diaSelecionado;
        
        // ‚úÖ FILTRAR ITENS DO DIA UNIFICADOS
        const eventosNoDia = eventos.filter(evento => {
            return evento.data === dataISO || 
                   evento.dataInicio === dataISO ||
                   (evento.data && evento.data.split('T')[0] === dataISO);
        }).slice(0, 4); // M√°ximo 4 eventos por dia
        
        const tarefasNoDia = tarefas.filter(tarefa => {
            return tarefa.dataInicio === dataISO ||
                   tarefa.data === dataISO ||
                   (tarefa.dataInicio && tarefa.dataInicio.split('T')[0] === dataISO);
        }).slice(0, 4); // M√°ximo 4 tarefas por dia
        
        const totalItens = eventosNoDia.length + tarefasNoDia.length;
        
        // Estilo base
        let backgroundColor = '#ffffff';
        if (ehHoje) backgroundColor = '#dbeafe';
        if (ehSelecionado) backgroundColor = '#fef3c7';

        celula.style.cssText = `
            background: ${backgroundColor} !important;
            border-right: 1px solid #e5e7eb !important;
            border-bottom: 1px solid #e5e7eb !important;
            min-height: 120px !important;
            padding: 8px !important;
            cursor: pointer !important;
            transition: background-color 0.2s ease !important;
            position: relative !important;
        `;

        // ‚úÖ HTML UNIFICADO v8.8.0
        celula.innerHTML = `
            <div style="
                font-weight: ${ehHoje || ehSelecionado ? '700' : '500'} !important;
                font-size: 14px !important;
                margin-bottom: 8px !important;
                color: ${ehHoje ? '#1e40af' : '#374151'} !important;
                display: flex !important;
                justify-content: space-between !important;
                align-items: center !important;
            ">
                <span>${dia}</span>
                <div style="display: flex; gap: 3px; align-items: center;">
                    ${eventosNoDia.length > 0 ? `<span style="font-size: 8px; background: #3b82f6; color: white; padding: 1px 4px; border-radius: 6px; font-weight: 600;">üìÖ${eventosNoDia.length}</span>` : ''}
                    ${tarefasNoDia.filter(t => t.escopo === 'equipe').length > 0 ? `<span style="font-size: 8px; background: #8b5cf6; color: white; padding: 1px 4px; border-radius: 6px; font-weight: 600;">üü£${tarefasNoDia.filter(t => t.escopo === 'equipe').length}</span>` : ''}
                    ${tarefasNoDia.filter(t => t.escopo === 'pessoal').length > 0 ? `<span style="font-size: 8px; background: #f59e0b; color: white; padding: 1px 4px; border-radius: 6px; font-weight: 600;">üü°${tarefasNoDia.filter(t => t.escopo === 'pessoal').length}</span>` : ''}
                </div>
            </div>
            
            <div style="
                display: flex !important;
                flex-direction: column !important;
                gap: 2px !important;
                max-height: 85px !important;
                overflow-y: auto !important;
            ">
                ${eventosNoDia.map(evento => this._criarHtmlItemUnificado(evento, 'evento')).join('')}
                ${tarefasNoDia.map(tarefa => this._criarHtmlItemUnificado(tarefa, 'tarefa')).join('')}
            </div>
        `;

        // Event listeners
        celula.addEventListener('click', () => {
            this.selecionarDia(dia);
        });

        celula.addEventListener('mouseenter', () => {
            celula.style.backgroundColor = totalItens > 0 ? '#ecfdf5' : '#f3f4f6';
        });

        celula.addEventListener('mouseleave', () => {
            celula.style.backgroundColor = backgroundColor;
        });

        return celula;
    },

    // üî• CRIAR HTML DO ITEM UNIFICADO (evento ou tarefa)
    _criarHtmlItemUnificado(item, tipoItem) {
        const escopo = item.escopo || 'equipe';
        const chaveEscopo = `${tipoItem}-${escopo}`;
        const cor = this.config.coresUnificadas[chaveEscopo] || this.config.coresUnificadas[tipoItem] || '#6b7280';
        const titulo = item.titulo || item.nome || `${tipoItem.charAt(0).toUpperCase() + tipoItem.slice(1)}`;
        const icone = this.config.iconesUnificados[`${tipoItem}-${item.tipo}`] || this.config.iconesUnificados[tipoItem] || 'üìå';
        
        // Status especial
        let corFinal = cor;
        if (item.status === 'concluido' || item.status === 'concluida') {
            corFinal = this.config.coresUnificadas.concluido;
        } else if (item.status === 'cancelado' || item.status === 'cancelada') {
            corFinal = this.config.coresUnificadas.cancelado;
        }
        
        return `
            <div onclick="Calendar.abrirItem('${item.id}', '${tipoItem}')" style="
                background: ${corFinal} !important;
                color: white !important;
                padding: 3px 6px !important;
                border-radius: 4px !important;
                font-size: 9px !important;
                font-weight: 600 !important;
                cursor: pointer !important;
                height: 18px !important;
                display: flex !important;
                align-items: center !important;
                overflow: hidden !important;
                white-space: nowrap !important;
                text-overflow: ellipsis !important;
                transition: transform 0.2s ease !important;
                border: 1px solid rgba(255,255,255,0.3) !important;
            " 
            onmouseenter="this.style.transform='translateY(-1px)'; this.style.boxShadow='0 2px 4px rgba(0,0,0,0.2)'"
            onmouseleave="this.style.transform='translateY(0)'; this.style.boxShadow='none'"
            title="${tipoItem.toUpperCase()}: ${titulo}${item.descricao ? ' - ' + item.descricao : ''}${item.escopo ? ' [' + item.escopo + ']' : ''}"
            >
                <span style="margin-right: 3px;">${icone}</span>
                <span style="overflow: hidden; text-overflow: ellipsis;">${titulo}</span>
            </div>
        `;
    },

    // üî• ABRIR ITEM (evento ou tarefa) - Click Handler Diferenciado
    abrirItem(itemId, tipoItem) {
        try {
            console.log(`üîç Abrindo ${tipoItem} ID: ${itemId}`);
            
            if (tipoItem === 'evento') {
                // Abrir evento via Events.js
                if (typeof Events !== 'undefined' && Events.editarEvento) {
                    Events.editarEvento(itemId);
                } else {
                    console.warn('‚ö†Ô∏è Events.js n√£o dispon√≠vel');
                    this._mostrarDetalhesItem(itemId, tipoItem);
                }
            } else if (tipoItem === 'tarefa') {
                // Redirecionar para agenda para editar tarefa
                if (typeof window.abrirMinhaAgendaUnificada !== 'undefined') {
                    console.log('üìã Redirecionando para agenda para editar tarefa...');
                    // TODO: Implementar deep link para tarefa espec√≠fica
                    window.abrirMinhaAgendaUnificada();
                } else {
                    this._mostrarDetalhesItem(itemId, tipoItem);
                }
            }
            
        } catch (error) {
            console.error(`‚ùå Erro ao abrir ${tipoItem}:`, error);
            this._mostrarDetalhesItem(itemId, tipoItem);
        }
    },

    // üî• MOSTRAR DETALHES DO ITEM (fallback)
    _mostrarDetalhesItem(itemId, tipoItem) {
        try {
            const { eventos, tarefas } = this._obterTodosItensUnificados();
            
            let item = null;
            if (tipoItem === 'evento') {
                item = eventos.find(e => e.id == itemId);
            } else {
                item = tarefas.find(t => t.id == itemId);
            }
            
            if (item) {
                const detalhes = `${tipoItem.toUpperCase()} - ${item.titulo}

üìä Tipo: ${item.tipo}
üéØ Escopo: ${item.escopo || 'N/A'}
üëÅÔ∏è Visibilidade: ${item.visibilidade || 'N/A'}
üìÖ Data: ${item.data || item.dataInicio}
${item.horario ? 'üïê Hor√°rio: ' + item.horario : ''}
üë§ Respons√°vel: ${item.responsavel || 'N/A'}
${item.participantes?.length > 0 ? 'üë• Participantes: ' + item.participantes.join(', ') : ''}

${item.descricao ? 'üìù Descri√ß√£o: ' + item.descricao : ''}

üí° Use a interface espec√≠fica para editar este item.`;
                
                alert(detalhes);
            } else {
                alert(`‚ùå ${tipoItem.charAt(0).toUpperCase() + tipoItem.slice(1)} n√£o encontrado.`);
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao mostrar detalhes:', error);
            alert(`‚ùå Erro ao abrir ${tipoItem}. Tente novamente.`);
        }
    },

    // üî• ATUALIZAR ESTAT√çSTICAS UNIFICADAS
    _atualizarEstatisticas() {
        try {
            const { eventos, tarefas, total } = this._obterTodosItensUnificados();
            const { total: totalVisiveis } = this._aplicarFiltrosExibicao(eventos, tarefas);
            
            // Contar itens de hoje
            const hoje = new Date().toISOString().split('T')[0];
            const itensHoje = [...eventos, ...tarefas].filter(item => {
                return (item.data === hoje) || (item.dataInicio === hoje);
            }).length;
            
            this.state.estatisticas = {
                totalEventos: eventos.length,
                totalTarefas: tarefas.length,
                itensVisiveisHoje: itensHoje,
                itensVisiveis: totalVisiveis
            };
            
        } catch (error) {
            console.error('‚ùå Erro ao atualizar estat√≠sticas:', error);
        }
    },

    // ========== NAVEGA√á√ÉO (mantida) ==========
    
    mesAnterior() {
        this.state.mesAtual--;
        if (this.state.mesAtual < 0) {
            this.state.mesAtual = 11;
            this.state.anoAtual--;
        }
        this.gerar();
    },

    proximoMes() {
        this.state.mesAtual++;
        if (this.state.mesAtual > 11) {
            this.state.mesAtual = 0;
            this.state.anoAtual++;
        }
        this.gerar();
    },

    selecionarDia(dia) {
        this.state.diaSelecionado = dia;
        this.gerar();
    },

    irParaData(ano, mes, dia = null) {
        this.state.anoAtual = ano;
        this.state.mesAtual = mes;
        if (dia) this.state.diaSelecionado = dia;
        this.gerar();
    },

    irParaHoje() {
        const hoje = new Date();
        this.irParaData(hoje.getFullYear(), hoje.getMonth(), hoje.getDate());
    },

    // ========== CRIA√á√ÉO (integra√ß√£o) ==========
    
    criarNovoEvento(dataInicial = null) {
        try {
            if (typeof Events !== 'undefined' && Events.mostrarNovoEvento) {
                const data = dataInicial || new Date(this.state.anoAtual, this.state.mesAtual, this.state.diaSelecionado).toISOString().split('T')[0];
                Events.mostrarNovoEvento(data);
            } else {
                console.warn('‚ö†Ô∏è Events.js n√£o dispon√≠vel para criar evento');
            }
        } catch (error) {
            console.error('‚ùå Erro ao criar novo evento:', error);
        }
    },

    criarNovaTarefa(dataInicial = null) {
        try {
            // Redirecionar para agenda unificada
            console.log('üìã Redirecionando para agenda unificada...');
            if (typeof window.abrirMinhaAgendaUnificada !== 'undefined') {
                window.abrirMinhaAgendaUnificada();
            } else {
                alert('üìã Use o bot√£o "Minha Agenda" para criar tarefas pessoais');
            }
        } catch (error) {
            console.error('‚ùå Erro ao criar nova tarefa:', error);
        }
    },

    // ========== UTILIT√ÅRIOS (mantidos) ==========
    
    _ehMesmoMesDia(data1, data2) {
        return data1.getDate() === data2.getDate() && 
               data1.getMonth() === data2.getMonth() && 
               data1.getFullYear() === data2.getFullYear();
    },

    // üî• DEBUG UNIFICADO v8.8.0
    debug() {
        const { eventos, tarefas, total } = this._obterTodosItensUnificados();
        const { total: totalVisiveis } = this._aplicarFiltrosExibicao(eventos, tarefas);
        
        const info = {
            carregado: this.state.carregado,
            mesAtual: this.config.MESES[this.state.mesAtual],
            anoAtual: this.state.anoAtual,
            
            // üî• Estat√≠sticas unificadas
            totalEventos: eventos.length,
            totalTarefas: tarefas.length,
            totalItens: total,
            itensVisiveis: totalVisiveis,
            
            // Filtros ativos
            filtrosAtivos: this.state.filtrosAtivos,
            
            // Estat√≠sticas detalhadas
            estatisticas: this.state.estatisticas,
            
            // Sistema
            integracaoUnificada: true,
            appUnificadoDisponivel: typeof App !== 'undefined' && App.config?.estruturaUnificada,
            versao: '8.8.0 - Integra√ß√£o Unificada Completa'
        };
        
        console.log('üìÖ Calendar Debug v8.8.0 UNIFICADO:', info);
        return info;
    },

    // üî• STATUS UNIFICADO v8.8.0
    obterStatus() {
        const { eventos, tarefas, total } = this._obterTodosItensUnificados();
        const { total: totalVisiveis } = this._aplicarFiltrosExibicao(eventos, tarefas);
        
        return {
            carregado: this.state.carregado,
            mesAtual: this.config.MESES[this.state.mesAtual],
            anoAtual: this.state.anoAtual,
            diaSelecionado: this.state.diaSelecionado,
            
            // üî• Dados unificados
            totalEventos: eventos.length,
            totalTarefas: tarefas.length,
            totalItens: total,
            itensVisiveis: totalVisiveis,
            
            // Filtros e configura√ß√µes
            filtrosAtivos: this.state.filtrosAtivos,
            
            // Estat√≠sticas
            estatisticas: this.state.estatisticas,
            
            // Integra√ß√µes
            integracoes: {
                app: typeof App !== 'undefined',
                appUnificado: typeof App !== 'undefined' && App.config?.estruturaUnificada,
                events: typeof Events !== 'undefined',
                appInicializado: typeof App !== 'undefined' && App.estadoSistema?.inicializado
            },
            
            // üî• Funcionalidades unificadas v8.8.0
            funcionalidades: {
                estruturaUnificada: true,
                fontesIntegradas: ['App.obterItensParaCalendario()'],
                filtrosVisuais: Object.keys(this.state.filtrosAtivos),
                coresEspecificas: true,
                clickHandlersDiferenciados: true,
                sincronizacaoCompleta: true
            },
            
            versao: '8.8.0',
            tipo: 'INTEGRA√á√ÉO_UNIFICADA_COMPLETA'
        };
    }
};

// ‚úÖ EXPOSI√á√ÉO GLOBAL
window.Calendar = Calendar;

// ‚úÖ FUN√á√ïES GLOBAIS UNIFICADAS v8.8.0
window.debugCalendar = () => Calendar.debug();
window.irParaHoje = () => Calendar.irParaHoje();
window.novoEvento = () => Calendar.criarNovoEvento();
window.novaTarefa = () => Calendar.criarNovaTarefa();
window.toggleTarefasCalendario = () => Calendar.toggleTarefasPessoais(); // Manter compatibilidade
window.toggleTarefasPessoais = () => Calendar.toggleTarefasPessoais();
window.toggleTarefasEquipe = () => Calendar.toggleTarefasEquipe();

// üî• LISTENER PARA APP.JS UNIFICADO (garantia de atualiza√ß√£o)
if (typeof window !== 'undefined') {
    window.addEventListener('dados-sincronizados', (e) => {
        console.log('üìÖ Calendar: App.js unificado sincronizou - atualizando...', e.detail);
        if (Calendar.state.carregado) {
            Calendar.atualizarEventos();
        }
    });
}

// ‚úÖ INICIALIZA√á√ÉO AUTOM√ÅTICA
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => Calendar.inicializar(), 1000);
});

console.log('üìÖ Calendar v8.8.0 INTEGRA√á√ÉO UNIFICADA COMPLETA carregado!');
console.log('üî• Funcionalidades: Eventos + Tarefas + Filtros visuais + Cores espec√≠ficas + Click handlers diferenciados');

/*
üî• INTEGRA√á√ÉO UNIFICADA v8.8.0 - FASE 2 COMPLETA:

‚úÖ VISUALIZA√á√ÉO UNIFICADA:
- Eventos + Tarefas no mesmo calend√°rio ‚úÖ
- Cores espec√≠ficas por escopo: üîµ Eventos, üü£ Equipe, üü° Pessoais ‚úÖ
- Badges com contadores por tipo ‚úÖ
- √çcones diferenciados por categoria ‚úÖ

‚úÖ FILTROS VISUAIS:
- Toggle para tarefas pessoais ‚úÖ
- Toggle para tarefas de equipe ‚úÖ
- Filtros independentes e configur√°veis ‚úÖ
- Estado persistente durante navega√ß√£o ‚úÖ

‚úÖ INTEGRA√á√ÉO PERFEITA:
- obterTodosItensUnificados() via App.js v8.7.0 ‚úÖ
- Estrutura unificada respeitada ‚úÖ
- Listener para sincroniza√ß√£o autom√°tica ‚úÖ
- Cache para performance ‚úÖ

‚úÖ CLICK HANDLERS DIFERENCIADOS:
- Eventos ‚Üí Events.editarEvento() ‚úÖ
- Tarefas ‚Üí Redirect para agenda unificada ‚úÖ
- Fallback com detalhes completos ‚úÖ

‚úÖ CONTROLES AVAN√áADOS:
- Navega√ß√£o entre meses mantida ‚úÖ
- Estat√≠sticas em tempo real ‚úÖ
- Link direto para "Minha Agenda" ‚úÖ
- Debug detalhado dispon√≠vel ‚úÖ

üìä RESULTADO FASE 2:
- Calend√°rio principal 100% integrado ‚úÖ
- Visualiza√ß√£o completa eventos + tarefas ‚úÖ
- Filtros funcionais e intuitivos ‚úÖ
- Base s√≥lida para Fase 3 (sincroniza√ß√£o bidirecional) ‚úÖ
*/
