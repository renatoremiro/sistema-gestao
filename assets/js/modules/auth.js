// auth.js v8.4.2 EMERGENCY - CORRIGINDO P√ÅGINA EM BRANCO
// Vers√£o simplificada para restaurar funcionamento b√°sico

const Auth = {
    // Estado do sistema de autentica√ß√£o
    state: {
        usuarioAtual: null,
        isLoggedIn: false,
        equipeCarregadaDoFirebase: false,
        fonteEquipeAtual: 'hardcoded'
    },

    // Configura√ß√£o dos paths do Firebase
    config: {
        pathsFirebase: {
            usuarios: 'dados/auth_equipe'
        }
    },

    // Departamentos b√°sicos (sem persist√™ncia por enquanto)
    departamentos: [
        "Gest√£o Geral",
        "Suprimentos", 
        "Qualidade & Produ√ß√£o",
        "Documenta√ß√£o & Arquivo",
        "Planejamento & Controle",
        "Recursos Humanos"
    ],

    // ===== FUN√á√ÉO SIMPLIFICADA: CARREGAR EQUIPE =====
    async _carregarEquipeDoFirebase() {
        console.log('üë• Auth: Tentando carregar equipe do Firebase...');
        
        try {
            // Verificar se Firebase est√° dispon√≠vel
            if (!window.database) {
                console.log('‚ö†Ô∏è Firebase n√£o dispon√≠vel - usando dados hardcoded');
                this.equipe = { ...this.equipeHardcoded };
                this.state.fonteEquipeAtual = 'hardcoded';
                return false;
            }

            // Tentar carregar do Firebase com timeout
            const promise = database.ref(this.config.pathsFirebase.usuarios).once('value');
            const timeoutPromise = new Promise((resolve) => {
                setTimeout(() => resolve(null), 3000); // 3 segundos timeout
            });

            const snapshot = await Promise.race([promise, timeoutPromise]);
            
            if (!snapshot) {
                console.log('‚è∞ Timeout no Firebase - usando dados hardcoded');
                this.equipe = { ...this.equipeHardcoded };
                this.state.fonteEquipeAtual = 'hardcoded';
                return false;
            }

            const usuariosFirebase = snapshot.val();

            if (usuariosFirebase && Object.keys(usuariosFirebase).length > 0) {
                this.equipe = usuariosFirebase;
                this.state.equipeCarregadaDoFirebase = true;
                this.state.fonteEquipeAtual = 'firebase';
                console.log(`‚úÖ ${Object.keys(usuariosFirebase).length} usu√°rios carregados do Firebase`);
                return true;
            } else {
                console.log('üì¶ Usando dados hardcoded');
                this.equipe = { ...this.equipeHardcoded };
                this.state.fonteEquipeAtual = 'hardcoded';
                return false;
            }

        } catch (error) {
            console.log('‚ùå Erro ao carregar Firebase - usando hardcoded:', error.message);
            this.equipe = { ...this.equipeHardcoded };
            this.state.fonteEquipeAtual = 'hardcoded';
            return false;
        }
    },

    // Equipe BIAPO hardcoded (sempre funcionando)
    equipeHardcoded: {
        renato: {
            id: 'renato',
            nome: 'Renato Remiro',
            email: 'renatoremiro@biapo.com.br',
            cargo: 'Coordenador Geral',
            departamento: 'Gest√£o Geral',
            permissoes: 'admin',
            telefone: '',
            ativo: true
        },
        alex: {
            id: 'alex',
            nome: 'Alex',
            email: 'alex@biapo.com.br',
            cargo: 'Comprador',
            departamento: 'Suprimentos',
            permissoes: 'editor',
            telefone: '',
            ativo: true
        },
        carlos: {
            id: 'carlos',
            nome: 'Carlos Mendon√ßa (Beto)',
            email: 'carlosmendonca@biapo.com.br',
            cargo: 'Coordenador',
            departamento: 'Qualidade & Produ√ß√£o',
            permissoes: 'editor',
            telefone: '',
            ativo: true
        },
        bruna: {
            id: 'bruna',
            nome: 'Bruna Britto',
            email: 'brunabritto@biapo.com.br',
            cargo: 'Arquiteta',
            departamento: 'Documenta√ß√£o & Arquivo',
            permissoes: 'editor',
            telefone: '',
            ativo: true
        },
        eduardo: {
            id: 'eduardo',
            nome: 'Eduardo Santos',
            email: 'eduardosantos@biapo.com.br',
            cargo: 'Coordenador',
            departamento: 'Suprimentos',
            permissoes: 'editor',
            telefone: '',
            ativo: true
        },
        isabella: {
            id: 'isabella',
            nome: 'Isabella',
            email: 'isabella@biapo.com.br',
            cargo: 'Coordenadora Geral',
            departamento: 'Planejamento & Controle',
            permissoes: 'editor',
            telefone: '',
            ativo: true
        },
        jean: {
            id: 'jean',
            nome: 'Jean (Estagi√°rio)',
            email: 'estagio292@biapo.com.br',
            cargo: 'Estagi√°rio de engenharia',
            departamento: 'Qualidade & Produ√ß√£o',
            permissoes: 'editor',
            telefone: '',
            ativo: true
        },
        juliana: {
            id: 'juliana',
            nome: 'Juliana (Rede Interna)',
            email: 'redeinterna.obra3@gmail.com',
            cargo: 'Estagi√°ria de arquitetura',
            departamento: 'Documenta√ß√£o & Arquivo',
            permissoes: 'editor',
            telefone: '',
            ativo: true
        },
        lara: {
            id: 'lara',
            nome: 'Lara Coutinho',
            email: 'laracoutinho@biapo.com.br',
            cargo: 'Arquiteta',
            departamento: 'Planejamento & Controle',
            permissoes: 'editor',
            telefone: '',
            ativo: true
        },
        nayara: {
            id: 'nayara',
            nome: 'Nayara Alencar',
            email: 'nayaraalencar@biapo.com.br',
            cargo: 'Chefe administrativo',
            departamento: 'Recursos Humanos',
            permissoes: 'editor',
            telefone: '',
            ativo: true
        },
        nominato: {
            id: 'nominato',
            nome: 'Nominato Pires',
            email: 'nominatopires@biapo.com.br',
            cargo: 'Almoxarifado',
            departamento: 'Suprimentos',
            permissoes: 'editor',
            telefone: '',
            ativo: true
        }
    },

    // Equipe em mem√≥ria
    equipe: {},

    // ===== INICIALIZA√á√ÉO SIMPLIFICADA E SEGURA =====
    async inicializar() {
        console.log('üöÄ Auth v8.4.2: Inicializando (modo emergency)...');
        
        try {
            // Primeiro, aplicar dados hardcoded para garantir funcionamento
            this.equipe = { ...this.equipeHardcoded };
            this.state.fonteEquipeAtual = 'hardcoded';
            
            // Tentar carregar do Firebase em background (sem travar)
            this._carregarEquipeDoFirebase().then(sucesso => {
                if (sucesso) {
                    console.log('‚úÖ Dados Firebase carregados em background');
                }
            }).catch(error => {
                console.log('‚ö†Ô∏è Falha no Firebase, mantendo hardcoded:', error.message);
            });
            
            // Verificar usu√°rio salvo
            const usuarioSalvo = localStorage.getItem('usuario_biapo');
            if (usuarioSalvo) {
                try {
                    const dadosUsuario = JSON.parse(usuarioSalvo);
                    if (this.equipe[dadosUsuario.id]) {
                        this.state.usuarioAtual = dadosUsuario;
                        this.state.isLoggedIn = true;
                        console.log(`üë§ Auto-login: ${dadosUsuario.nome}`);
                    }
                } catch (e) {
                    console.log('‚ö†Ô∏è Erro no auto-login, removendo dados salvos');
                    localStorage.removeItem('usuario_biapo');
                }
            }
            
            console.log('‚úÖ Auth: Sistema inicializado com sucesso');
            this._exibirStatus();
            
        } catch (error) {
            console.error('‚ùå Erro cr√≠tico na inicializa√ß√£o:', error);
            // Mesmo com erro, garantir dados b√°sicos
            this.equipe = { ...this.equipeHardcoded };
            this.state.fonteEquipeAtual = 'hardcoded';
        }
    },

    // Status simplificado
    _exibirStatus() {
        console.log('\nüìä STATUS AUTH v8.4.2 EMERGENCY:');
        console.log(`   üë• Usu√°rios: ${Object.keys(this.equipe).length}`);
        console.log(`   üìä Fonte: ${this.state.fonteEquipeAtual}`);
        console.log(`   üîë Logado: ${this.state.isLoggedIn ? this.state.usuarioAtual?.nome : 'N√£o'}`);
        console.log(`   üî• Firebase: ${this.state.equipeCarregadaDoFirebase ? 'SIM' : 'N√ÉO'}`);
    },

    // Fun√ß√£o de login
    login(nomeUsuario) {
        const usuario = this.equipe[nomeUsuario.toLowerCase()];
        
        if (!usuario) {
            console.log(`‚ùå Usu√°rio '${nomeUsuario}' n√£o encontrado`);
            return false;
        }
        
        if (!usuario.ativo) {
            console.log(`‚ùå Usu√°rio '${nomeUsuario}' est√° inativo`);
            return false;
        }
        
        this.state.usuarioAtual = usuario;
        this.state.isLoggedIn = true;
        
        // Salvar no localStorage
        try {
            localStorage.setItem('usuario_biapo', JSON.stringify(usuario));
        } catch (e) {
            console.log('‚ö†Ô∏è Erro ao salvar no localStorage');
        }
        
        console.log(`‚úÖ Login realizado: ${usuario.nome}`);
        return true;
    },

    // Fun√ß√£o de logout
    logout() {
        this.state.usuarioAtual = null;
        this.state.isLoggedIn = false;
        try {
            localStorage.removeItem('usuario_biapo');
        } catch (e) {
            console.log('‚ö†Ô∏è Erro ao limpar localStorage');
        }
        console.log('üëã Logout realizado');
    },

    // Verificar se usu√°rio pode editar
    podeEditar() {
        return this.state.isLoggedIn && 
               this.state.usuarioAtual?.permissoes &&
               ['admin', 'editor'].includes(this.state.usuarioAtual.permissoes);
    },

    // Verificar se usu√°rio √© admin
    isAdmin() {
        return this.state.isLoggedIn && 
               this.state.usuarioAtual?.permissoes === 'admin';
    },

    // Obter usu√°rio atual
    getUsuarioAtual() {
        return this.state.usuarioAtual;
    },

    // Verificar se est√° logado
    isLoggedIn() {
        return this.state.isLoggedIn;
    }
};

// ===== FUN√á√ïES GLOBAIS SIMPLIFICADAS =====

// Status do sistema
function statusAuth() {
    console.log('\nüîç STATUS AUTH v8.4.2 EMERGENCY:');
    console.log('=' .repeat(40));
    console.log(`üîë Logado: ${Auth.state.isLoggedIn ? Auth.state.usuarioAtual.nome : 'N√ÉO'}`);
    console.log(`üë• Usu√°rios: ${Object.keys(Auth.equipe).length}`);
    console.log(`üìä Fonte: ${Auth.state.fonteEquipeAtual}`);
    console.log(`üî• Firebase: ${Auth.state.equipeCarregadaDoFirebase ? 'SIM' : 'N√ÉO'}`);
    console.log(`‚úÖ Status: FUNCIONANDO`);
}

// Login r√°pido
function loginBiapo(nome) {
    return Auth.login(nome);
}

// Logout r√°pido
function logoutBiapo() {
    Auth.logout();
}

// Listar equipe
function equipeBiapo() {
    console.log('\nüë• EQUIPE BIAPO:');
    Object.values(Auth.equipe).forEach(user => {
        console.log(`   ${user.nome} (${user.id}) - ${user.cargo}`);
    });
}

// Recarregar do Firebase
async function recarregarEquipeFirebase() {
    console.log('üîÑ Recarregando equipe do Firebase...');
    try {
        const sucesso = await Auth._carregarEquipeDoFirebase();
        console.log(sucesso ? '‚úÖ Sucesso' : '‚ö†Ô∏è Usando fallback');
        return sucesso;
    } catch (error) {
        console.log('‚ùå Erro:', error.message);
        return false;
    }
}

// Teste de funcionamento
function testarSistema() {
    console.log('\nüß™ TESTE SISTEMA v8.4.2:');
    console.log('1Ô∏è‚É£ Auth carregado:', typeof Auth !== 'undefined' ? '‚úÖ' : '‚ùå');
    console.log('2Ô∏è‚É£ Equipe:', Object.keys(Auth.equipe).length > 0 ? '‚úÖ' : '‚ùå');
    console.log('3Ô∏è‚É£ Login funcionando:', typeof Auth.login === 'function' ? '‚úÖ' : '‚ùå');
    console.log('4Ô∏è‚É£ Status geral:', Auth.state ? '‚úÖ' : '‚ùå');
}

// ===== INICIALIZA√á√ÉO SEGURA =====
if (typeof document !== 'undefined') {
    // Aguardar DOM e Firebase
    document.addEventListener('DOMContentLoaded', () => {
        // Aguardar um pouco para garantir que Firebase carregou
        setTimeout(() => {
            Auth.inicializar();
        }, 500);
    });
}

// ===== COMENT√ÅRIOS v8.4.2 EMERGENCY =====
/*
CORRE√á√ïES EMERGENCY v8.4.2:

1. ‚úÖ REMOVIDO: Funcionalidades complexas de departamentos
2. ‚úÖ SIMPLIFICADO: Inicializa√ß√£o sem depend√™ncias cr√≠ticas
3. ‚úÖ TIMEOUT: Firebase com timeout para n√£o travar
4. ‚úÖ TRY/CATCH: Prote√ß√£o contra erros que quebram p√°gina
5. ‚úÖ FALLBACK: Dados hardcoded sempre funcionando
6. ‚úÖ ASYNC SEGURO: Carregamento Firebase em background
7. ‚úÖ LOCALSTORAGE: Prote√ß√£o contra erros de acesso

OBJETIVO: P√ÅGINA FUNCIONANDO NOVAMENTE!

AP√ìS TESTE: Implementar departamentos gradualmente
*/
