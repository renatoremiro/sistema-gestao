/* ========== üìã SISTEMA H√çBRIDO - MINHA AGENDA v6.6.0 - P√ÅGINA DEDICADA INTEGRADA ========== */

const PersonalAgenda = {
    // ‚úÖ CONFIGURA√á√ïES H√çBRIDAS COMPLETAS
    config: {
        // Tipos de tarefas
        tipos: [
            { value: 'pessoal', label: 'Pessoal', icon: 'üë§', cor: '#f59e0b' },
            { value: 'equipe', label: 'Equipe', icon: 'üë•', cor: '#06b6d4' },
            { value: 'projeto', label: 'Projeto', icon: 'üèóÔ∏è', cor: '#8b5cf6' },
            { value: 'urgente', label: 'Urgente', icon: 'üö®', cor: '#ef4444' },
            { value: 'rotina', label: 'Rotina', icon: 'üîÑ', cor: '#6b7280' }
        ],
        
        // Prioridades
        prioridades: [
            { value: 'baixa', label: 'Baixa', cor: '#22c55e' },
            { value: 'media', label: 'M√©dia', cor: '#f59e0b' },
            { value: 'alta', label: 'Alta', cor: '#ef4444' },
            { value: 'critica', label: 'Cr√≠tica', cor: '#dc2626' }
        ],
        
        // Status das tarefas
        status: [
            { value: 'pendente', label: 'Pendente', cor: '#6b7280' },
            { value: 'andamento', label: 'Em andamento', cor: '#3b82f6' },
            { value: 'revisao', label: 'Em revis√£o', cor: '#f59e0b' },
            { value: 'concluida', label: 'Conclu√≠da', cor: '#10b981' },
            { value: 'cancelada', label: 'Cancelada', cor: '#ef4444' }
        ],
        
        // Dias da semana
        diasSemana: [
            { value: 'segunda', label: 'Segunda-feira', abrev: 'Seg' },
            { value: 'terca', label: 'Ter√ßa-feira', abrev: 'Ter' },
            { value: 'quarta', label: 'Quarta-feira', abrev: 'Qua' },
            { value: 'quinta', label: 'Quinta-feira', abrev: 'Qui' },
            { value: 'sexta', label: 'Sexta-feira', abrev: 'Sex' },
            { value: 'sabado', label: 'S√°bado', abrev: 'S√°b' },
            { value: 'domingo', label: 'Domingo', abrev: 'Dom' }
        ],

        // URLs e navega√ß√£o
        urls: {
            agendaDedicada: 'agenda.html',
            sistemaprincipal: 'index.html'
        }
    },

    // ‚úÖ ESTADO INTERNO ATUALIZADO
    state: {
        pessoaAtual: null,
        usuarioLogado: false,
        versao: '6.6.0 - P√°gina Dedicada',
        tipoSistema: 'Redirecionamento',
        modalObsoleto: true, // Modal foi removido
        navegacaoAtiva: true,
        ultimaAtualizacao: null
    },

    // ‚úÖ INICIALIZA√á√ÉO
    init() {
        try {
            console.log('üìã Inicializando PersonalAgenda v6.6.0 (P√°gina Dedicada Integrada)...');
            
            // Definir usu√°rio atual dinamicamente
            this._definirUsuarioAtual();
            
            // Verificar depend√™ncias
            this._verificarDependencias();
            
            // Configurar eventos se necess√°rio
            this._configurarEventosGlobais();
            
            // Atualizar estado
            this.state.ultimaAtualizacao = new Date().toISOString();
            
            console.log(`‚úÖ PersonalAgenda inicializado para: ${this.state.pessoaAtual}`);
            console.log(`üîÑ Modo: ${this.state.tipoSistema} ‚Üí ${this.config.urls.agendaDedicada}`);
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar PersonalAgenda:', error);
            // Fallback
            this.state.pessoaAtual = 'Usu√°rio';
            this.state.usuarioLogado = false;
        }
    },

    // üîß FUN√á√ÉO PRINCIPAL: ABRIR AGENDA DEDICADA
    abrirMinhaAgenda(pessoa = null) {
        try {
            console.log('üìã Abrindo agenda dedicada...');
            
            // Definir usu√°rio se fornecido
            if (pessoa) {
                this.state.pessoaAtual = pessoa;
                console.log(`üë§ Usu√°rio definido: ${pessoa}`);
            } else {
                this._definirUsuarioAtual();
            }

            // Salvar estado atual para preservar navega√ß√£o
            this._salvarEstadoNavegacao();

            // üéØ REDIRECIONAMENTO PARA P√ÅGINA DEDICADA
            const urlAgenda = this.config.urls.agendaDedicada;
            
            // Adicionar par√¢metros se necess√°rio
            const params = new URLSearchParams();
            if (this.state.pessoaAtual && this.state.pessoaAtual !== 'Usu√°rio') {
                params.append('usuario', this.state.pessoaAtual);
            }
            
            // Adicionar timestamp para for√ßar recarregamento se necess√°rio
            params.append('t', Date.now());
            
            const urlCompleta = params.toString() ? `${urlAgenda}?${params.toString()}` : urlAgenda;
            
            // Notificar usu√°rio
            if (typeof Notifications !== 'undefined') {
                Notifications.info(`üìã Abrindo agenda de ${this.state.pessoaAtual}...`);
            }
            
            // Fazer redirecionamento
            console.log(`üîÑ Redirecionando para: ${urlCompleta}`);
            window.location.href = urlCompleta;
            
        } catch (error) {
            console.error('‚ùå Erro ao abrir agenda dedicada:', error);
            
            // Fallback: tentar abrir em nova aba
            this._fallbackNovaAba();
        }
    },

    // ‚úÖ ABRIR AGENDA EM NOVA ABA
    abrirAgendaNovaAba() {
        try {
            console.log('üîó Abrindo agenda em nova aba...');
            
            this._definirUsuarioAtual();
            this._salvarEstadoNavegacao();
            
            const urlAgenda = this.config.urls.agendaDedicada;
            const params = new URLSearchParams();
            
            if (this.state.pessoaAtual && this.state.pessoaAtual !== 'Usu√°rio') {
                params.append('usuario', this.state.pessoaAtual);
            }
            params.append('nova_aba', 'true');
            params.append('t', Date.now());
            
            const urlCompleta = params.toString() ? `${urlAgenda}?${params.toString()}` : urlAgenda;
            
            // Abrir nova aba
            const novaAba = window.open(urlCompleta, '_blank');
            
            if (novaAba) {
                if (typeof Notifications !== 'undefined') {
                    Notifications.success(`üîó Agenda de ${this.state.pessoaAtual} aberta em nova aba!`);
                }
                console.log('‚úÖ Nova aba aberta com sucesso');
            } else {
                throw new Error('Popup bloqueado ou erro ao abrir nova aba');
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao abrir nova aba:', error);
            
            if (typeof Notifications !== 'undefined') {
                Notifications.warning('‚ö†Ô∏è N√£o foi poss√≠vel abrir nova aba. Verifique bloqueador de popup.');
            }
            
            // Fallback: redirecionamento normal
            this.abrirMinhaAgenda();
        }
    },

    // üîß FUN√á√ÉO AUXILIAR: DEFINIR USU√ÅRIO ATUAL DINAMICAMENTE
    _definirUsuarioAtual() {
        try {
            let usuarioDetectado = null;
            let fonte = 'fallback';

            // Prioridade 1: Usu√°rio do App.js (Firebase Auth)
            if (App && App.usuarioAtual && App.usuarioAtual.email) {
                usuarioDetectado = this._extrairNomeDoEmail(App.usuarioAtual.email);
                this.state.usuarioLogado = true;
                fonte = 'App.usuarioAtual';
            }
            // Prioridade 2: Usu√°rio do Auth.js
            else if (typeof Auth !== 'undefined' && Auth.state && Auth.state.usuarioAtual) {
                const usuario = Auth.state.usuarioAtual;
                usuarioDetectado = usuario.displayName || this._extrairNomeDoEmail(usuario.email);
                this.state.usuarioLogado = true;
                fonte = 'Auth.state.usuarioAtual';
            }
            // Prioridade 3: Fun√ß√£o global obterUsuarioAtual (se existir)
            else if (typeof obterUsuarioAtual === 'function') {
                const usuario = obterUsuarioAtual();
                if (usuario && usuario.nome) {
                    usuarioDetectado = usuario.nome;
                    this.state.usuarioLogado = true;
                    fonte = 'obterUsuarioAtual()';
                }
            }
            // Prioridade 4: SessionStorage (navega√ß√£o anterior)
            else {
                const estadoNavegacao = sessionStorage.getItem('agenda_navegacao');
                if (estadoNavegacao) {
                    try {
                        const estado = JSON.parse(estadoNavegacao);
                        if (estado.usuario) {
                            usuarioDetectado = estado.usuario;
                            fonte = 'sessionStorage';
                        }
                    } catch (e) {
                        console.warn('‚ö†Ô∏è Erro ao ler sessionStorage:', e);
                    }
                }
            }

            // Fallback final
            if (!usuarioDetectado) {
                usuarioDetectado = 'Usu√°rio';
                this.state.usuarioLogado = false;
                fonte = 'fallback';
            }

            this.state.pessoaAtual = usuarioDetectado;
            
            console.log(`üë§ Usu√°rio detectado: ${usuarioDetectado} (fonte: ${fonte})`);
            
        } catch (error) {
            console.error('‚ùå Erro ao definir usu√°rio atual:', error);
            this.state.pessoaAtual = 'Usu√°rio';
            this.state.usuarioLogado = false;
        }
    },

    // üîß EXTRAIR NOME DO EMAIL
    _extrairNomeDoEmail(email) {
        if (!email) return 'Usu√°rio';
        
        const parteLocal = email.split('@')[0];
        
        // Casos especiais conhecidos da BIAPO
        const mapaUsuarios = {
            'renatoremiro': 'Renato Remiro',
            'isabella': 'Isabella',
            'eduardo': 'Eduardo',
            'lara': 'Lara',
            'beto': 'Beto',
            'admin': 'Administrador',
            'admin@biapo': 'Administrador BIAPO',
            'suporte': 'Suporte',
            'teste': 'Usu√°rio Teste'
        };
        
        const usuarioMapeado = mapaUsuarios[parteLocal.toLowerCase()];
        if (usuarioMapeado) {
            return usuarioMapeado;
        }
        
        // Caso geral: capitalizar primeira letra e tentar limpar
        let nomeFormatado = parteLocal.charAt(0).toUpperCase() + parteLocal.slice(1);
        
        // Remover n√∫meros do final (ex: user123 ‚Üí User)
        nomeFormatado = nomeFormatado.replace(/\d+$/, '');
        
        // Tratar underscores e pontos (ex: joao_silva ‚Üí Joao Silva)
        nomeFormatado = nomeFormatado.replace(/[_\.]/g, ' ');
        
        return nomeFormatado.trim() || 'Usu√°rio';
    },

    // üíæ SALVAR ESTADO DE NAVEGA√á√ÉO
    _salvarEstadoNavegacao() {
        try {
            const estado = {
                usuario: this.state.pessoaAtual,
                usuarioLogado: this.state.usuarioLogado,
                timestamp: new Date().toISOString(),
                origem: this._obterOrigemPagina(),
                dadosApp: App && App.dados ? JSON.stringify(App.dados) : null,
                versao: this.state.versao
            };
            
            // Salvar no sessionStorage para a p√°gina agenda acessar
            sessionStorage.setItem('agenda_navegacao', JSON.stringify(estado));
            
            console.log('üíæ Estado de navega√ß√£o salvo:', {
                usuario: estado.usuario,
                origem: estado.origem,
                temDados: !!estado.dadosApp
            });
            
        } catch (error) {
            console.error('‚ùå Erro ao salvar estado de navega√ß√£o:', error);
        }
    },

    // üîç OBTER ORIGEM DA P√ÅGINA
    _obterOrigemPagina() {
        try {
            const path = window.location.pathname;
            const filename = path.split('/').pop();
            
            if (filename.includes('index') || filename === '') {
                return 'Sistema Principal';
            } else if (filename.includes('agenda')) {
                return 'Agenda Dedicada';
            } else {
                return filename || 'P√°gina Desconhecida';
            }
        } catch (error) {
            return 'P√°gina Desconhecida';
        }
    },

    // üîß FALLBACK: NOVA ABA SE REDIRECIONAMENTO FALHAR
    _fallbackNovaAba() {
        try {
            console.log('üîÑ Tentando fallback: nova aba...');
            
            const urlSimples = this.config.urls.agendaDedicada;
            window.open(urlSimples, '_blank');
            
            if (typeof Notifications !== 'undefined') {
                Notifications.warning('‚ö†Ô∏è Redirecionamento falhou. Agenda aberta em nova aba.');
            }
            
        } catch (fallbackError) {
            console.error('‚ùå Fallback tamb√©m falhou:', fallbackError);
            
            if (typeof Notifications !== 'undefined') {
                Notifications.error('‚ùå Erro ao abrir agenda. Verifique se arquivo agenda.html existe.');
            }
            
            // √öltimo recurso: mostrar alerta com instru√ß√µes
            alert(
                '‚ö†Ô∏è N√£o foi poss√≠vel abrir a agenda automaticamente.\n\n' +
                'Por favor, abra manualmente o arquivo: agenda.html\n\n' +
                'Ou verifique se o arquivo existe no mesmo diret√≥rio.'
            );
        }
    },

    // ‚úÖ VERIFICAR DEPEND√äNCIAS
    _verificarDependencias() {
        try {
            const dependencias = {
                App: typeof App !== 'undefined',
                Helpers: typeof Helpers !== 'undefined',
                Notifications: typeof Notifications !== 'undefined',
                Storage: typeof Storage !== 'undefined' || typeof sessionStorage !== 'undefined'
            };
            
            let dependenciasOk = 0;
            let dependenciasTotal = Object.keys(dependencias).length;
            
            Object.entries(dependencias).forEach(([nome, disponivel]) => {
                if (disponivel) {
                    dependenciasOk++;
                    console.log(`‚úÖ ${nome} dispon√≠vel`);
                } else {
                    console.warn(`‚ö†Ô∏è ${nome} n√£o dispon√≠vel`);
                }
            });
            
            console.log(`üìä Depend√™ncias: ${dependenciasOk}/${dependenciasTotal} dispon√≠veis`);
            
            return dependencias.Storage; // Pelo menos storage deve funcionar
            
        } catch (error) {
            console.error('‚ùå Erro ao verificar depend√™ncias:', error);
            return false;
        }
    },

    // ‚öôÔ∏è CONFIGURAR EVENTOS GLOBAIS
    _configurarEventosGlobais() {
        try {
            // Listener para mudan√ßas no localStorage/sessionStorage
            window.addEventListener('storage', (e) => {
                if (e.key === 'agenda_navegacao' || e.key === 'agenda_acao') {
                    console.log('üîÑ Estado de navega√ß√£o alterado externamente');
                }
            });
            
            // Listener para beforeunload (opcional)
            window.addEventListener('beforeunload', () => {
                this._salvarEstadoNavegacao();
            });
            
            console.log('‚öôÔ∏è Eventos globais configurados');
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao configurar eventos globais:', error);
        }
    },

    // ‚úÖ FUN√á√ÉO DE COMPATIBILIDADE: MOSTRAR NOVA TAREFA
    mostrarNovaTarefa(tipo = 'pessoal', responsavel = null) {
        try {
            console.log(`üìù Criando nova tarefa tipo: ${tipo}`);
            
            const responsavelFinal = responsavel || this.state.pessoaAtual;
            
            // Verificar se Tasks est√° dispon√≠vel (sistema principal)
            if (typeof Tasks !== 'undefined' && typeof Tasks.mostrarNovaTarefa === 'function') {
                Tasks.mostrarNovaTarefa(tipo, responsavelFinal);
                return;
            }
            
            // Se Tasks n√£o dispon√≠vel, criar tarefa r√°pida e ir para agenda
            this._criarTarefaRapidaEIrParaAgenda(tipo, responsavelFinal);
            
        } catch (error) {
            console.error('‚ùå Erro ao mostrar nova tarefa:', error);
            
            if (typeof Notifications !== 'undefined') {
                Notifications.error('Erro ao criar nova tarefa');
            }
        }
    },

    // üöÄ CRIAR TAREFA R√ÅPIDA E IR PARA AGENDA
    _criarTarefaRapidaEIrParaAgenda(tipo, responsavel) {
        try {
            const titulo = prompt(`üìù T√≠tulo da nova tarefa ${tipo}:`);
            if (!titulo || titulo.trim() === '') {
                console.log('‚èπÔ∏è Cria√ß√£o de tarefa cancelada');
                return;
            }
            
            const novaTarefa = {
                id: Date.now(),
                titulo: titulo.trim(),
                tipo: tipo,
                status: 'pendente',
                prioridade: tipo === 'urgente' ? 'alta' : 'media',
                responsavel: responsavel,
                dataCriacao: new Date().toISOString(),
                dataInicio: new Date().toISOString().split('T')[0]
            };
            
            // Garantir estrutura de dados
            if (typeof App !== 'undefined') {
                if (!App.dados) App.dados = {};
                if (!App.dados.tarefas) App.dados.tarefas = [];
                
                App.dados.tarefas.push(novaTarefa);
                
                // Tentar salvar se Persistence dispon√≠vel
                if (typeof Persistence !== 'undefined') {
                    Persistence.salvarDadosCritico();
                }
            }
            
            // Salvar a√ß√£o para processar na agenda
            sessionStorage.setItem('agenda_acao', JSON.stringify({
                tipo: 'nova_tarefa_criada',
                tarefaId: novaTarefa.id,
                timestamp: new Date().toISOString()
            }));
            
            console.log('‚úÖ Tarefa r√°pida criada:', novaTarefa.titulo);
            
            if (typeof Notifications !== 'undefined') {
                Notifications.success(`üìù Tarefa "${novaTarefa.titulo}" criada!`);
            }
            
            // Ir para agenda para ver/editar a tarefa
            setTimeout(() => {
                this.abrirMinhaAgenda();
            }, 500);
            
        } catch (error) {
            console.error('‚ùå Erro ao criar tarefa r√°pida:', error);
            
            if (typeof Notifications !== 'undefined') {
                Notifications.error('Erro ao criar tarefa r√°pida');
            }
        }
    },

    // ‚úÖ FUN√á√ïES DE COMPATIBILIDADE (manter para n√£o quebrar c√≥digo existente)
    
    // Editar tarefa - redireciona para agenda
    editarTarefa(tarefaId) {
        console.log(`‚úèÔ∏è Redirecionando para edi√ß√£o da tarefa: ${tarefaId}`);
        
        sessionStorage.setItem('agenda_acao', JSON.stringify({
            tipo: 'editar',
            tarefaId: tarefaId,
            timestamp: new Date().toISOString()
        }));
        
        this.abrirMinhaAgenda();
    },

    // Sincronizar e abrir agenda
    sincronizarComCalendario() {
        console.log('üîÑ Sincronizando e abrindo agenda...');
        
        try {
            // Tentar sincronizar se HybridSync dispon√≠vel
            if (typeof HybridSync !== 'undefined' && typeof HybridSync.sincronizarEventosParaTarefas === 'function') {
                HybridSync.sincronizarEventosParaTarefas();
                
                if (typeof Notifications !== 'undefined') {
                    Notifications.success('üîÑ Sincroniza√ß√£o iniciada!');
                }
            }
            
            // Ir para agenda
            setTimeout(() => {
                this.abrirMinhaAgenda();
            }, 1000);
            
        } catch (error) {
            console.error('‚ùå Erro na sincroniza√ß√£o:', error);
            
            // Ir para agenda mesmo se sincroniza√ß√£o falhar
            this.abrirMinhaAgenda();
        }
    },

    // Marcar tarefa como conclu√≠da (compatibilidade)
    marcarConcluida(tarefaId) {
        console.log(`‚úÖ Marcando tarefa como conclu√≠da: ${tarefaId}`);
        
        sessionStorage.setItem('agenda_acao', JSON.stringify({
            tipo: 'marcar_concluida',
            tarefaId: tarefaId,
            timestamp: new Date().toISOString()
        }));
        
        this.abrirMinhaAgenda();
    },

    // Excluir tarefa (compatibilidade)
    excluirTarefa(tarefaId) {
        console.log(`üóëÔ∏è Redirecionando para exclus√£o da tarefa: ${tarefaId}`);
        
        sessionStorage.setItem('agenda_acao', JSON.stringify({
            tipo: 'excluir',
            tarefaId: tarefaId,
            timestamp: new Date().toISOString()
        }));
        
        this.abrirMinhaAgenda();
    },

    // ‚ö†Ô∏è FUN√á√ïES OBSOLETAS (mantidas para compatibilidade)
    _criarModalAgenda() {
        console.warn('‚ö†Ô∏è _criarModalAgenda() obsoleta - redirecionando para p√°gina dedicada');
        this.abrirMinhaAgenda();
    },

    _mostrarModalNovaTarefa(tipo) {
        console.warn('‚ö†Ô∏è _mostrarModalNovaTarefa() obsoleta - usando nova implementa√ß√£o');
        this.mostrarNovaTarefa(tipo);
    },

    _renderizarConteudoAgenda() {
        console.warn('‚ö†Ô∏è _renderizarConteudoAgenda() obsoleta - fun√ß√£o movida para agenda.html');
        this.abrirMinhaAgenda();
        return '';
    },

    // ‚úÖ OBTER STATUS COMPLETO DO SISTEMA
    obterStatus() {
        return {
            // Informa√ß√µes do usu√°rio
            pessoaAtual: this.state.pessoaAtual,
            usuarioLogado: this.state.usuarioLogado,
            emailDetectado: this._obterEmailUsuarioAtual(),
            
            // Informa√ß√µes do sistema
            versao: this.state.versao,
            tipoSistema: this.state.tipoSistema,
            modalObsoleto: this.state.modalObsoleto,
            navegacaoAtiva: this.state.navegacaoAtiva,
            
            // URLs e configura√ß√£o
            agendaDedicada: this.config.urls.agendaDedicada,
            sistemaAtual: this._obterOrigemPagina(),
            
            // Depend√™ncias
            dependenciasOk: this._verificarDependencias(),
            appDisponivel: typeof App !== 'undefined',
            dadosCarregados: typeof App !== 'undefined' && !!App.dados,
            
            // Estado da navega√ß√£o
            ultimaAtualizacao: this.state.ultimaAtualizacao,
            estadoSalvo: !!sessionStorage.getItem('agenda_navegacao'),
            
            // Compatibilidade
            funcoesDisponiveis: {
                abrirMinhaAgenda: typeof this.abrirMinhaAgenda === 'function',
                abrirAgendaNovaAba: typeof this.abrirAgendaNovaAba === 'function',
                mostrarNovaTarefa: typeof this.mostrarNovaTarefa === 'function',
                editarTarefa: typeof this.editarTarefa === 'function',
                sincronizarComCalendario: typeof this.sincronizarComCalendario === 'function'
            }
        };
    },

    // üîß OBTER EMAIL DO USU√ÅRIO ATUAL
    _obterEmailUsuarioAtual() {
        try {
            if (App && App.usuarioAtual && App.usuarioAtual.email) {
                return App.usuarioAtual.email;
            }
            
            if (typeof Auth !== 'undefined' && Auth.state && Auth.state.usuarioAtual) {
                return Auth.state.usuarioAtual.email;
            }
            
            if (typeof obterUsuarioAtual === 'function') {
                const usuario = obterUsuarioAtual();
                return usuario ? usuario.email : null;
            }
            
            return null;
        } catch (error) {
            console.error('‚ùå Erro ao obter email do usu√°rio:', error);
            return null;
        }
    },

    // üîß M√âTODOS AUXILIARES DE DADOS (compatibilidade)
    _obterMinhasTarefas() {
        try {
            if (!App.dados?.tarefas) return [];
            
            return App.dados.tarefas.filter(tarefa => {
                return tarefa.responsavel === this.state.pessoaAtual ||
                       tarefa.pessoas?.includes(this.state.pessoaAtual);
            });
        } catch (error) {
            console.error('‚ùå Erro ao obter tarefas:', error);
            return [];
        }
    },

    _obterAgendaSemanal() {
        try {
            if (!App.dados?.agendas?.[this.state.pessoaAtual]) {
                return {};
            }
            
            return App.dados.agendas[this.state.pessoaAtual] || {};
        } catch (error) {
            console.error('‚ùå Erro ao obter agenda semanal:', error);
            return {};
        }
    },

    // üß™ FUN√á√ÉO DE DEBUG E TESTES
    debug() {
        const status = this.obterStatus();
        console.group('üß™ DEBUG PersonalAgenda v6.6.0');
        console.log('üìä Status completo:', status);
        console.log('üë§ Usu√°rio atual:', this.state.pessoaAtual);
        console.log('üîó URL da agenda:', this.config.urls.agendaDedicada);
        console.log('üíæ Estado salvo:', sessionStorage.getItem('agenda_navegacao'));
        console.log('üìã Minhas tarefas:', this._obterMinhasTarefas().length);
        console.log('üìÖ Agenda semanal:', this._obterAgendaSemanal());
        console.groupEnd();
        
        return status;
    }
};

// ‚úÖ EXPOR NO WINDOW GLOBAL
window.PersonalAgenda = PersonalAgenda;

// ‚úÖ INICIALIZA√á√ÉO AUTOM√ÅTICA
document.addEventListener('DOMContentLoaded', () => {
    if (typeof PersonalAgenda !== 'undefined') {
        PersonalAgenda.init();
    }
});

// ‚úÖ FUN√á√ÉO GLOBAL DE TESTE
window.testarPersonalAgenda = () => {
    console.log('üß™ Testando PersonalAgenda...');
    
    const status = PersonalAgenda.obterStatus();
    console.log('üìä Status:', status);
    
    if (typeof Notifications !== 'undefined') {
        Notifications.info(`‚úÖ PersonalAgenda v${status.versao} funcionando!`);
    }
    
    return status;
};

// ‚úÖ LOG DE INICIALIZA√á√ÉO COMPLETO
console.log('üìã PersonalAgenda v6.6.0 - P√ÅGINA DEDICADA INTEGRADA carregado!');
console.log('üîÑ MUDAN√áA PRINCIPAL: Modal ‚Üí Redirecionamento para agenda.html');
console.log('üì± Uso principal: PersonalAgenda.abrirMinhaAgenda()');
console.log('üÜï Novas fun√ß√µes: PersonalAgenda.abrirAgendaNovaAba()');
console.log('‚úÖ Compatibilidade: 100% mantida com c√≥digo existente');
console.log('üß™ Debug: PersonalAgenda.debug() ou testarPersonalAgenda()');
console.log('üìä Status: PersonalAgenda.obterStatus()');
console.log('üéØ Sistema pronto para integra√ß√£o com agenda dedicada!');
