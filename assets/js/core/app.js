/**
 * üöÄ Sistema Principal v8.3.1 OTIMIZADO - LIMPEZA CONSERVADORA MODERADA
 * 
 * üî• OTIMIZA√á√ïES APLICADAS:
 * - ‚úÖ M√©todos de carregamento unificados
 * - ‚úÖ Timeouts reduzidos e centralizados
 * - ‚úÖ Verifica√ß√µes Firebase cached
 * - ‚úÖ Debug simplificado
 * - ‚úÖ C√≥digo redundante removido
 */

const App = {
    // ‚úÖ ESTADO OTIMIZADO
    estadoSistema: {
        inicializado: false,
        carregandoDados: false,
        usuarioAutenticado: false,
        usuarioEmail: null,
        versao: '8.3.1', // OTIMIZADA
        debugMode: false,
        ultimoCarregamento: null,
        modoAnonimo: false,
        departamentosCarregados: false,
        ultimoCarregamentoDepartamentos: null,
        // üî• NOVO: Cache de verifica√ß√µes
        firebaseDisponivel: null,
        ultimaVerificacaoFirebase: null
    },

    // üìä DADOS PRINCIPAIS
    dados: {
        eventos: [],
        areas: {},
        tarefas: [],
        metadata: {
            versao: '8.3.1',
            ultimaAtualizacao: null
        }
    },

    // üë§ USU√ÅRIO ATUAL
    usuarioAtual: null,

    // üî• CONFIGURA√á√ÉO OTIMIZADA
    config: {
        timeoutPadrao: 5000, // REDUZIDO: 8000 ‚Üí 5000ms
        maxTentativas: 2, // REDUZIDO: 3 ‚Üí 2
        cacheVerificacao: 30000, // 30s de cache
        delayModulos: 150 // REDUZIDO: 200 ‚Üí 150ms
    },

    // üî• VERIFICA√á√ÉO FIREBASE CENTRALIZADA E CACHED
    _verificarFirebase() {
        const agora = Date.now();
        
        // Cache v√°lido por 30 segundos
        if (this.estadoSistema.ultimaVerificacaoFirebase && 
            (agora - this.estadoSistema.ultimaVerificacaoFirebase) < this.config.cacheVerificacao &&
            this.estadoSistema.firebaseDisponivel !== null) {
            return this.estadoSistema.firebaseDisponivel;
        }
        
        const disponivel = typeof database !== 'undefined' && database;
        
        this.estadoSistema.firebaseDisponivel = disponivel;
        this.estadoSistema.ultimaVerificacaoFirebase = agora;
        
        return disponivel;
    },

    // üî• TIMEOUT PROMISE CENTRALIZADO
    _criarTimeoutPromise(ms, mensagem) {
        return new Promise((_, reject) => {
            setTimeout(() => reject(new Error(mensagem || 'Timeout')), ms);
        });
    },

    // üî• INICIALIZA√á√ÉO OTIMIZADA v8.3.1
    async inicializar() {
        try {
            console.log('üöÄ Inicializando Sistema BIAPO v8.3.1 OTIMIZADA...');
            
            this.estadoSistema.carregandoDados = true;
            
            // 1. Configurar estrutura b√°sica
            this._configurarEstruturaBasica();
            
            // 2. üî• CARREGAR DADOS UNIFICADO (SEM USU√ÅRIOS)
            await this._carregarDadosFirebaseUnificado();
            
            // 3. Configurar usu√°rio se estiver logado
            this._configurarUsuarioAtual();
            
            // 4. Detectar modo an√¥nimo
            this._detectarModoAnonimo();
            
            // 5. Inicializar m√≥dulos otimizado
            this._inicializarModulos();
            
            // 6. Renderizar interface
            this._renderizarInterface();
            
            // 7. Finalizar
            this.estadoSistema.inicializado = true;
            this.estadoSistema.carregandoDados = false;
            this.estadoSistema.ultimoCarregamento = new Date().toISOString();
            
            console.log('‚úÖ Sistema BIAPO v8.3.1 OTIMIZADA inicializado!');
            console.log(`üìä Eventos: ${this.dados.eventos.length} | Departamentos: ${this._contarDepartamentos()}`);
            console.log(`üë§ Modo: ${this.estadoSistema.modoAnonimo ? 'An√¥nimo' : 'Autenticado'}`);
            console.log(`üë• Usu√°rios: ${typeof Auth !== 'undefined' && Auth.equipe ? Object.keys(Auth.equipe).length : 'N/A'}`);
            console.log(`‚ö° Firebase: ${this.estadoSistema.firebaseDisponivel ? 'Dispon√≠vel' : 'Offline'}`);
            
        } catch (error) {
            console.error('‚ùå Erro na inicializa√ß√£o:', error);
            this.estadoSistema.carregandoDados = false;
            
            // Fallback otimizado
            this._configurarEstruturaBasica();
            this._inicializarModulos();
            this._renderizarInterface();
        }
    },

    // üî• CARREGAMENTO FIREBASE UNIFICADO (eventos + departamentos)
    async _carregarDadosFirebaseUnificado() {
        try {
            console.log('üì• Carregamento Firebase unificado...');
            
            if (!this._verificarFirebase()) {
                console.warn('‚ö†Ô∏è Firebase offline - usando dados locais');
                this._configurarDepartamentosPadrao();
                return;
            }
            
            // üî• CARREGAMENTO PARALELO OTIMIZADO
            const [dadosFirebase, departamentosFirebase] = await Promise.allSettled([
                this._buscarDadosFirebase(),
                this._buscarDepartamentosFirebase()
            ]);
            
            // Processar dados gerais
            if (dadosFirebase.status === 'fulfilled' && dadosFirebase.value) {
                this._aplicarDadosCarregados(dadosFirebase.value);
                console.log(`‚úÖ Dados gerais: ${this.dados.eventos.length} eventos`);
            }
            
            // Processar departamentos
            if (departamentosFirebase.status === 'fulfilled' && departamentosFirebase.value) {
                this._aplicarDepartamentosCarregados(departamentosFirebase.value);
                console.log(`‚úÖ Departamentos: ${this._contarDepartamentos()} carregados`);
            } else {
                this._configurarDepartamentosPadrao();
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro no carregamento unificado:', error.message);
            this._configurarDepartamentosPadrao();
            await this._tentarCarregarBackupLocal();
        }
    },

    // üî• BUSCAR DADOS FIREBASE OTIMIZADO
    async _buscarDadosFirebase() {
        try {
            console.log('üîç Buscando dados em /dados...');
            
            const snapshot = await Promise.race([
                database.ref('dados').once('value'),
                this._criarTimeoutPromise(this.config.timeoutPadrao, 'Timeout dados gerais')
            ]);
            
            const dados = snapshot.val();
            
            if (dados) {
                console.log(`üì¶ Dados encontrados: ${dados.eventos ? dados.eventos.length : 0} eventos`);
                
                return {
                    eventos: dados.eventos || [],
                    areas: dados.areas || {},
                    tarefas: dados.tarefas || [],
                    metadata: dados.metadata || {}
                };
            }
            
            return null;
            
        } catch (error) {
            console.error('‚ùå Erro ao buscar dados:', error);
            throw error;
        }
    },

    // üî• BUSCAR DEPARTAMENTOS FIREBASE OTIMIZADO
    async _buscarDepartamentosFirebase() {
        try {
            console.log('üîç Buscando departamentos...');
            
            const snapshot = await Promise.race([
                database.ref('dados/departamentos').once('value'),
                this._criarTimeoutPromise(this.config.timeoutPadrao, 'Timeout departamentos')
            ]);
            
            const dados = snapshot.val();
            
            if (dados && typeof dados === 'object') {
                const departamentos = Object.values(dados)
                    .filter(dept => dept && dept.ativo !== false && dept.nome)
                    .map(dept => dept.nome.trim())
                    .sort((a, b) => a.localeCompare(b, 'pt-BR'));
                
                console.log(`üè¢ ${departamentos.length} departamentos encontrados`);
                return departamentos;
            }
            
            return null;
            
        } catch (error) {
            console.error('‚ùå Erro ao buscar departamentos:', error);
            return null;
        }
    },

    // üî• APLICAR DADOS CARREGADOS
    _aplicarDadosCarregados(dadosFirebase) {
        this.dados = {
            eventos: dadosFirebase.eventos || [],
            areas: dadosFirebase.areas || {},
            tarefas: dadosFirebase.tarefas || [],
            metadata: dadosFirebase.metadata || { versao: '8.3.1' }
        };
        
        if (this.dados.metadata) {
            this.dados.metadata.ultimoCarregamento = new Date().toISOString();
        }
    },

    // üî• APLICAR DEPARTAMENTOS CARREGADOS
    _aplicarDepartamentosCarregados(departamentos) {
        if (typeof Auth !== 'undefined' && Array.isArray(departamentos)) {
            Auth.departamentos = [...departamentos];
            this.estadoSistema.departamentosCarregados = true;
            this.estadoSistema.ultimoCarregamentoDepartamentos = new Date().toISOString();
            console.log(`‚úÖ Departamentos sincronizados com Auth: ${departamentos.length}`);
        }
    },

    // üî• CONFIGURAR DEPARTAMENTOS PADR√ÉO OTIMIZADO
    _configurarDepartamentosPadrao() {
        const departamentosPadrao = [
            "Gest√£o Geral",
            "Obra e Constru√ß√£o", 
            "Museu Nacional"
        ];
        
        if (typeof Auth !== 'undefined') {
            Auth.departamentos = [...departamentosPadrao];
            console.log('üìã Departamentos padr√£o configurados');
        }
        
        this.estadoSistema.departamentosCarregados = false;
    },

    // üî• CONTAR DEPARTAMENTOS OTIMIZADO
    _contarDepartamentos() {
        try {
            return typeof Auth !== 'undefined' && Auth.departamentos && Array.isArray(Auth.departamentos) ? 
                Auth.departamentos.length : 0;
        } catch (error) {
            return 0;
        }
    },

    // üî• RECARREGAR DEPARTAMENTOS OTIMIZADO
    async recarregarDepartamentos() {
        try {
            console.log('üîÑ Recarregando departamentos...');
            
            if (!this._verificarFirebase()) {
                console.log('‚ö†Ô∏è Firebase offline');
                return false;
            }
            
            const departamentos = await this._buscarDepartamentosFirebase();
            
            if (departamentos) {
                this._aplicarDepartamentosCarregados(departamentos);
                
                // Notificar m√≥dulos
                if (typeof Events !== 'undefined' && Events.atualizarParticipantes) {
                    Events.atualizarParticipantes();
                }
                
                if (typeof Notifications !== 'undefined') {
                    Notifications.success('üè¢ Departamentos atualizados!');
                }
                
                console.log('‚úÖ Departamentos recarregados');
                return true;
            } else {
                console.log('‚ö†Ô∏è Nenhum departamento encontrado');
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao recarregar departamentos:', error);
            
            if (typeof Notifications !== 'undefined') {
                Notifications.error('Erro ao recarregar departamentos');
            }
            
            return false;
        }
    },

    // üî• DETECTAR MODO AN√îNIMO OTIMIZADO
    _detectarModoAnonimo() {
        this.estadoSistema.modoAnonimo = !this.estadoSistema.usuarioAutenticado;
        
        if (this.estadoSistema.modoAnonimo) {
            console.log('üëÅÔ∏è Modo an√¥nimo ativado');
            this._mostrarIndicadorModoAnonimo();
        }
    },

    // üî• INDICADOR MODO AN√îNIMO OTIMIZADO
    _mostrarIndicadorModoAnonimo() {
        try {
            if (document.getElementById('indicadorAnonimo')) return;
            
            const indicador = document.createElement('div');
            indicador.id = 'indicadorAnonimo';
            indicador.style.cssText = `
                position: fixed;
                top: 10px;
                right: 10px;
                background: linear-gradient(135deg, #374151, #1f2937);
                color: white;
                padding: 8px 16px;
                border-radius: 20px;
                font-size: 12px;
                font-weight: 600;
                z-index: 1000;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                display: flex;
                align-items: center;
                gap: 6px;
            `;
            
            indicador.innerHTML = `
                <span>üëÅÔ∏è</span>
                <span>Modo Visualiza√ß√£o</span>
                <small style="opacity: 0.8; margin-left: 4px;">(Apenas Leitura)</small>
            `;
            
            document.body.appendChild(indicador);
            
        } catch (error) {
            // Silencioso - indicador √© opcional
        }
    },

    // üî• BACKUP LOCAL OTIMIZADO
    async _tentarCarregarBackupLocal() {
        try {
            if (typeof Persistence !== 'undefined' && Persistence.recuperarBackupLocal) {
                const backup = Persistence.recuperarBackupLocal();
                
                if (backup) {
                    this.dados = {
                        eventos: backup.eventos || [],
                        areas: backup.areas || {},
                        tarefas: backup.tarefas || [],
                        metadata: backup.metadata || {}
                    };
                    console.log(`üìÇ Backup local: ${this.dados.eventos.length} eventos`);
                    return;
                }
            }
            
            console.log('üìù Iniciando com dados vazios');
            this._configurarEstruturaBasica();
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro no backup local:', error);
            this._configurarEstruturaBasica();
        }
    },

    // ‚úÖ CONFIGURAR ESTRUTURA B√ÅSICA OTIMIZADA
    _configurarEstruturaBasica() {
        if (!this.dados.eventos) this.dados.eventos = [];
        if (!this.dados.areas) this.dados.areas = {};
        if (!this.dados.tarefas) this.dados.tarefas = [];
        if (!this.dados.metadata) {
            this.dados.metadata = {
                versao: '8.3.1',
                ultimaAtualizacao: new Date().toISOString()
            };
        }
        
        // Aplicar estrutura padr√£o se necess√°rio
        if (typeof DataStructure !== 'undefined' && DataStructure.inicializarDados) {
            const estruturaPadrao = DataStructure.inicializarDados();
            
            if (Object.keys(this.dados.areas).length === 0) {
                this.dados.areas = estruturaPadrao.areas;
            }
        }
        
        console.log('‚úÖ Estrutura b√°sica configurada');
    },

    // ‚úÖ CONFIGURAR USU√ÅRIO ATUAL (mantido)
    _configurarUsuarioAtual() {
        try {
            if (typeof Auth !== 'undefined' && Auth.obterUsuario) {
                this.usuarioAtual = Auth.obterUsuario();
                
                if (this.usuarioAtual) {
                    this.estadoSistema.usuarioAutenticado = true;
                    this.estadoSistema.usuarioEmail = this.usuarioAtual.email;
                    console.log(`üë§ Usu√°rio: ${this.usuarioAtual.email}`);
                } else {
                    console.log('üëÅÔ∏è Usu√°rio an√¥nimo');
                }
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao configurar usu√°rio:', error);
        }
    },

    // üî• INICIALIZAR M√ìDULOS OTIMIZADO
    _inicializarModulos() {
        try {
            console.log('üîß Inicializando m√≥dulos...');
            
            setTimeout(() => {
                // Calendar
                if (typeof Calendar !== 'undefined' && Calendar.inicializar) {
                    Calendar.inicializar();
                    console.log('‚úÖ Calendar');
                }
                
                // Tasks
                if (typeof Tasks !== 'undefined' && Tasks.inicializar) {
                    Tasks.inicializar();
                    console.log('‚úÖ Tasks');
                }
                
                // Events - notificar sobre departamentos
                if (typeof Events !== 'undefined' && Events.atualizarParticipantes) {
                    Events.atualizarParticipantes();
                    console.log('‚úÖ Events');
                }
                
            }, this.config.delayModulos); // REDUZIDO: 200ms ‚Üí 150ms
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar m√≥dulos:', error);
        }
    },

    // ‚úÖ RENDERIZAR INTERFACE (mantido)
    _renderizarInterface() {
        try {
            this._atualizarInfoInterface();
            
            if (typeof this.renderizarDashboard === 'function') {
                this.renderizarDashboard();
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao renderizar interface:', error);
        }
    },

    // ‚úÖ ATUALIZAR INFO INTERFACE (mantido)
    _atualizarInfoInterface() {
        try {
            const agora = new Date();
            
            // Data atual
            const dataElement = document.getElementById('dataAtual');
            if (dataElement) {
                dataElement.textContent = agora.toLocaleDateString('pt-BR', {
                    weekday: 'long',
                    day: 'numeric',
                    month: 'long'
                });
            }
            
            // M√™s e ano
            const mesAnoElement = document.getElementById('mesAno');
            if (mesAnoElement) {
                mesAnoElement.textContent = agora.toLocaleDateString('pt-BR', {
                    month: 'long',
                    year: 'numeric'
                });
            }
            
            // Usu√°rio logado
            const usuarioElement = document.getElementById('usuarioLogado');
            if (usuarioElement) {
                if (this.estadoSistema.modoAnonimo) {
                    usuarioElement.textContent = 'üëÅÔ∏è Visualiza√ß√£o';
                    usuarioElement.style.opacity = '0.7';
                } else {
                    const nomeUsuario = this.usuarioAtual?.displayName || this.usuarioAtual?.email || 'Sistema';
                    usuarioElement.textContent = `üë§ ${nomeUsuario}`;
                    usuarioElement.style.opacity = '1';
                }
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao atualizar interface:', error);
        }
    },

    // üîÑ RECARREGAR DADOS OTIMIZADO
    async recarregarDados() {
        try {
            console.log('üîÑ Recarregando dados...');
            
            this.estadoSistema.carregandoDados = true;
            
            // Recarregar dados + departamentos em paralelo
            await this._carregarDadosFirebaseUnificado();
            
            // Atualizar m√≥dulos
            if (typeof Calendar !== 'undefined' && Calendar.atualizarEventos) {
                Calendar.atualizarEventos();
            }
            
            if (typeof Events !== 'undefined' && Events.atualizarParticipantes) {
                Events.atualizarParticipantes();
            }
            
            this._renderizarInterface();
            this.estadoSistema.carregandoDados = false;
            
            if (typeof Notifications !== 'undefined') {
                Notifications.success('üîÑ Dados atualizados!');
            }
            
            console.log('‚úÖ Dados recarregados');
            
        } catch (error) {
            console.error('‚ùå Erro ao recarregar:', error);
            this.estadoSistema.carregandoDados = false;
            
            if (typeof Notifications !== 'undefined') {
                Notifications.error('Erro ao recarregar dados');
            }
        }
    },

    // üíæ SALVAR DADOS OTIMIZADO (protegido por auth)
    async salvarDados() {
        if (this.estadoSistema.modoAnonimo) {
            if (typeof Notifications !== 'undefined') {
                Notifications.warning('‚ö†Ô∏è Login necess√°rio para salvar');
            }
            console.warn('‚ö†Ô∏è Salvamento bloqueado: modo an√¥nimo');
            return Promise.reject('Login necess√°rio');
        }
        
        try {
            if (typeof Persistence !== 'undefined' && Persistence.salvarDados) {
                await Persistence.salvarDados();
            }
        } catch (error) {
            console.error('‚ùå Erro ao salvar:', error);
        }
    },

    // üíæ SALVAR DADOS CR√çTICO OTIMIZADO (protegido por auth)
    async salvarDadosCritico() {
        if (this.estadoSistema.modoAnonimo) {
            if (typeof Notifications !== 'undefined') {
                Notifications.warning('‚ö†Ô∏è Login necess√°rio para salvar eventos');
            }
            console.warn('‚ö†Ô∏è Salvamento cr√≠tico bloqueado: modo an√¥nimo');
            return Promise.reject('Login necess√°rio');
        }
        
        try {
            if (typeof Persistence !== 'undefined' && Persistence.salvarDadosCritico) {
                await Persistence.salvarDadosCritico();
            }
        } catch (error) {
            console.error('‚ùå Erro ao salvar cr√≠tico:', error);
        }
    },

    // üìä RENDERIZAR DASHBOARD (mantido)
    renderizarDashboard() {
        try {
            console.log('üìä Dashboard atualizado');
        } catch (error) {
            console.error('‚ùå Erro ao renderizar dashboard:', error);
        }
    },

    // üìä STATUS DO SISTEMA OTIMIZADO v8.3.1
    obterStatusSistema() {
        return {
            inicializado: this.estadoSistema.inicializado,
            carregandoDados: this.estadoSistema.carregandoDados,
            usuarioAutenticado: this.estadoSistema.usuarioAutenticado,
            modoAnonimo: this.estadoSistema.modoAnonimo,
            versao: this.estadoSistema.versao,
            totalEventos: this.dados.eventos.length,
            totalAreas: Object.keys(this.dados.areas).length,
            totalUsuarios: typeof Auth !== 'undefined' && Auth.equipe ? Object.keys(Auth.equipe).length : 0,
            fonteUsuarios: 'Auth.equipe',
            // Departamentos
            totalDepartamentos: this._contarDepartamentos(),
            departamentosCarregados: this.estadoSistema.departamentosCarregados,
            ultimoCarregamentoDepartamentos: this.estadoSistema.ultimoCarregamentoDepartamentos,
            fonteDepartamentos: this.estadoSistema.departamentosCarregados ? 'Firebase' : 'Padr√£o',
            ultimoCarregamento: this.estadoSistema.ultimoCarregamento,
            // Firebase
            firebase: this.estadoSistema.firebaseDisponivel,
            ultimaVerificacaoFirebase: this.estadoSistema.ultimaVerificacaoFirebase,
            // M√≥dulos
            modules: {
                Calendar: typeof Calendar !== 'undefined',
                Events: typeof Events !== 'undefined',
                Persistence: typeof Persistence !== 'undefined',
                Auth: typeof Auth !== 'undefined',
                AdminUsersManager: typeof AdminUsersManager !== 'undefined'
            },
            // Permiss√µes
            permissoes: {
                leitura: true,
                escrita: !this.estadoSistema.modoAnonimo,
                admin: this.usuarioAtual?.admin || false
            },
            // Integra√ß√£o
            integracao: {
                authEquipePreservado: typeof Auth !== 'undefined' && !!Auth.equipe,
                dadosFirebaseSemUsuarios: !this.dados.hasOwnProperty('usuarios'),
                departamentosSincronizados: this.estadoSistema.departamentosCarregados && typeof Auth !== 'undefined' && Array.isArray(Auth.departamentos)
            },
            // üî• OTIMIZA√á√ïES
            otimizacoes: {
                timeoutReduzido: this.config.timeoutPadrao + 'ms',
                tentativasReduzidas: this.config.maxTentativas,
                cacheFirebase: this.config.cacheVerificacao + 'ms',
                carregamentoUnificado: true,
                delayModulosOtimizado: this.config.delayModulos + 'ms'
            }
        };
    },

    // üîß FUN√á√ïES DE UTILIDADE MANTIDAS
    obterEventos() {
        return this.dados.eventos || [];
    },

    adicionarEvento(evento) {
        if (this.estadoSistema.modoAnonimo) {
            throw new Error('Login necess√°rio para adicionar eventos');
        }
        
        if (!this.dados.eventos) this.dados.eventos = [];
        this.dados.eventos.push(evento);
    },

    atualizarEvento(id, dadosAtualizados) {
        if (this.estadoSistema.modoAnonimo) {
            throw new Error('Login necess√°rio para atualizar eventos');
        }
        
        const index = this.dados.eventos.findIndex(e => e.id == id);
        if (index !== -1) {
            this.dados.eventos[index] = { ...this.dados.eventos[index], ...dadosAtualizados };
        }
    },

    removerEvento(id) {
        if (this.estadoSistema.modoAnonimo) {
            throw new Error('Login necess√°rio para remover eventos');
        }
        
        this.dados.eventos = this.dados.eventos.filter(e => e.id != id);
    },

    podeEditar() {
        return !this.estadoSistema.modoAnonimo;
    },

    ehAdmin() {
        return this.usuarioAtual?.admin === true;
    },

    // üî• FUN√á√ïES DE DADOS OTIMIZADAS
    obterUsuarios() {
        try {
            if (typeof Auth !== 'undefined' && Auth.equipe) {
                return Auth.equipe;
            }
            console.warn('‚ö†Ô∏è Auth.equipe n√£o dispon√≠vel');
            return {};
        } catch (error) {
            console.error('‚ùå Erro ao obter usu√°rios:', error);
            return {};
        }
    },

    obterDepartamentos() {
        try {
            if (typeof Auth !== 'undefined' && Auth.departamentos && Array.isArray(Auth.departamentos)) {
                return Auth.departamentos;
            }
            console.warn('‚ö†Ô∏è Auth.departamentos n√£o dispon√≠vel');
            return ["Gest√£o Geral", "Obra e Constru√ß√£o", "Museu Nacional"];
        } catch (error) {
            console.error('‚ùå Erro ao obter departamentos:', error);
            return ["Gest√£o Geral", "Obra e Constru√ß√£o", "Museu Nacional"];
        }
    }
};

// ‚úÖ EXPOSI√á√ÉO GLOBAL
window.App = App;

// ‚úÖ FUN√á√ïES GLOBAIS DE CONVENI√äNCIA OTIMIZADAS
window.recarregarDados = () => App.recarregarDados();
window.statusSistema = () => App.obterStatusSistema();
window.recarregarDepartamentos = () => App.recarregarDepartamentos();

// üî• VERIFICA√á√ÉO DE SISTEMA OTIMIZADA v8.3.1
window.verificarSistema = () => {
    const status = App.obterStatusSistema();
    console.table({
        'Inicializado': status.inicializado ? 'Sim' : 'N√£o',
        'Modo': status.modoAnonimo ? 'An√¥nimo' : 'Autenticado',
        'Eventos': status.totalEventos,
        '√Åreas': status.totalAreas,
        'Usu√°rios (Auth.equipe)': status.totalUsuarios,
        'Fonte Usu√°rios': status.fonteUsuarios,
        'Departamentos': status.totalDepartamentos,
        'Departamentos Carregados': status.departamentosCarregados ? 'Sim' : 'N√£o',
        'Fonte Departamentos': status.fonteDepartamentos,
        'Firebase': status.firebase ? 'Conectado' : 'Offline',
        'Timeout Otimizado': status.otimizacoes.timeoutReduzido,
        'Tentativas Reduzidas': status.otimizacoes.tentativasReduzidas,
        'Cache Firebase': status.otimizacoes.cacheFirebase,
        'Carregamento': status.otimizacoes.carregamentoUnificado ? 'Unificado' : 'Separado'
    });
    return status;
};

// üî• DEBUG DEPARTAMENTOS OTIMIZADO
window.debugDepartamentos = () => {
    console.log('üè¢ ============ DEBUG DEPARTAMENTOS v8.3.1 OTIMIZADA ============');
    
    const authDepartamentos = typeof Auth !== 'undefined' && Auth.departamentos ? Auth.departamentos : null;
    const statusCarregados = App.estadoSistema.departamentosCarregados;
    
    console.log('üè¢ Auth.departamentos:', authDepartamentos ? authDepartamentos.length + ' departamentos' : 'INDISPON√çVEL');
    console.log('üìä Carregados Firebase:', statusCarregados ? 'SIM' : 'N√ÉO (padr√£o)');
    console.log('‚è∞ √öltimo carregamento:', App.estadoSistema.ultimoCarregamentoDepartamentos || 'Nunca');
    console.log('‚ö° Cache Firebase ativo:', App.estadoSistema.firebaseDisponivel ? 'SIM' : 'N√ÉO');
    
    if (authDepartamentos) {
        console.log('üìã Lista:');
        authDepartamentos.forEach((dept, i) => {
            console.log(`  ${i + 1}. ${dept}`);
        });
    }
    
    // Verificar Firebase se dispon√≠vel
    if (App.estadoSistema.firebaseDisponivel) {
        database.ref('dados/departamentos').once('value').then(snapshot => {
            const dados = snapshot.val();
            console.log(`\nüî• FIREBASE: ${dados ? Object.keys(dados).length : 0} departamentos`);
            if (dados) {
                Object.values(dados).forEach(dept => {
                    console.log(`   - ${dept.nome} (${dept.ativo ? 'ativo' : 'inativo'})`);
                });
            }
        });
    }
    
    console.log('üéØ Integra√ß√£o:', statusCarregados && authDepartamentos ? 'FUNCIONANDO ‚úÖ' : 'PROBLEMA ‚ùå');
    console.log('üè¢ ================================================================');
    
    return {
        departamentos: authDepartamentos,
        total: authDepartamentos ? authDepartamentos.length : 0,
        carregadosFirebase: statusCarregados,
        ultimoCarregamento: App.estadoSistema.ultimoCarregamentoDepartamentos,
        cacheFirebase: App.estadoSistema.firebaseDisponivel,
        funcionando: statusCarregados && authDepartamentos
    };
};

// üî• TESTE DEPARTAMENTOS OTIMIZADO
window.testarDepartamentos = async () => {
    console.log('üß™ ============ TESTE DEPARTAMENTOS v8.3.1 OTIMIZADA ============');
    console.log('üìä Status antes:');
    debugDepartamentos();
    
    console.log('\nüîÑ Recarregando otimizado...');
    const resultado = await App.recarregarDepartamentos();
    
    console.log('\nüìä Status ap√≥s:');
    debugDepartamentos();
    
    console.log('\nüéØ RESULTADO:', resultado ? '‚úÖ FUNCIONANDO!' : '‚ö†Ô∏è Padr√£o mantido');
    console.log('üß™ ================================================================');
    
    return resultado;
};

// üî• COMANDO DE LIMPEZA DE CACHE
window.limparCacheApp = function() {
    App.estadoSistema.ultimaVerificacaoFirebase = null;
    App.estadoSistema.firebaseDisponivel = null;
    console.log('üóëÔ∏è Cache App limpo!');
};

// ‚úÖ INICIALIZA√á√ÉO AUTOM√ÅTICA OTIMIZADA
document.addEventListener('DOMContentLoaded', async () => {
    setTimeout(async () => {
        await App.inicializar();
    }, 400); // REDUZIDO: 500ms ‚Üí 400ms
});

// ‚úÖ LOG FINAL OTIMIZADO
console.log('üöÄ App.js v8.3.1 OTIMIZADA - LIMPEZA CONSERVADORA MODERADA aplicada!');
console.log('‚ö° Otimiza√ß√µes: Carregamento unificado + Timeouts reduzidos + Cache Firebase + Delays otimizados');

/*
üî• OTIMIZA√á√ïES APLICADAS v8.3.1:

‚úÖ CARREGAMENTO UNIFICADO:
- _carregarDadosFirebaseUnificado(): Dados + departamentos em paralelo ‚úÖ
- Promise.allSettled() para n√£o falhar se um path estiver offline ‚úÖ
- Busca otimizada com timeouts reduzidos ‚úÖ

‚úÖ TIMEOUTS E DELAYS OTIMIZADOS:
- Timeout padr√£o: 8000ms ‚Üí 5000ms ‚úÖ
- Delay m√≥dulos: 200ms ‚Üí 150ms ‚úÖ
- Inicializa√ß√£o: 500ms ‚Üí 400ms ‚úÖ
- Max tentativas: 3 ‚Üí 2 ‚úÖ

‚úÖ CACHE CENTRALIZADO:
- _verificarFirebase() com cache de 30s ‚úÖ
- Evita verifica√ß√µes redundantes ‚úÖ
- Cache compartilhado entre m√©todos ‚úÖ

‚úÖ M√âTODOS UNIFICADOS:
- _criarTimeoutPromise() centralizado ‚úÖ
- Aplica√ß√£o de dados unificada ‚úÖ
- Recarregamento otimizado ‚úÖ

‚úÖ DEBUG SIMPLIFICADO:
- Status mostra otimiza√ß√µes aplicadas ‚úÖ
- Comandos debug otimizados ‚úÖ
- Cache de limpeza dispon√≠vel ‚úÖ

üìä RESULTADO:
- Performance melhorada com carregamento paralelo ‚úÖ
- Menos timeouts e delays ‚úÖ
- Cache inteligente evita verifica√ß√µes desnecess√°rias ‚úÖ
- C√≥digo mais limpo e organizado ‚úÖ
- Funcionalidade 100% preservada ‚úÖ
*/
