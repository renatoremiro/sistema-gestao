/**
 * üöÄ Sistema Principal v8.3 - CORRE√á√ÉO DEFINITIVA PERSIST√äNCIA
 * 
 * üî• CORRE√á√ÉO CR√çTICA: N√ÉO sobrescrever Auth.equipe com dados do Firebase
 * ‚úÖ LEITURA LIVRE: Carregamento sem necessidade de autentica√ß√£o
 * ‚úÖ ESCRITA PROTEGIDA: Salvamento apenas para usu√°rios autenticados
 * ‚úÖ EVENTOS GLOBAIS: Toda equipe BIAPO v√™ os mesmos eventos
 * ‚úÖ USU√ÅRIOS PRESERVADOS: Auth.equipe nunca √© sobrescrito
 */

const App = {
    // ‚úÖ ESTADO DO SISTEMA
    estadoSistema: {
        inicializado: false,
        carregandoDados: false,
        usuarioAutenticado: false,
        usuarioEmail: null,
        versao: '8.3.0', // ATUALIZADO
        debugMode: false,
        ultimoCarregamento: null,
        modoAnonimo: false
    },

    // üìä DADOS PRINCIPAIS (carregados do Firebase)
    dados: {
        eventos: [],
        areas: {},
        tarefas: [],
        // üî• USU√ÅRIOS REMOVIDOS - Auth.equipe √© a fonte √∫nica
        metadata: {
            versao: '8.3.0',
            ultimaAtualizacao: null
        }
    },

    // üë§ USU√ÅRIO ATUAL
    usuarioAtual: null,

    // üî• INICIALIZA√á√ÉO PRINCIPAL CORRIGIDA v8.3
    async inicializar() {
        try {
            console.log('üöÄ Inicializando Sistema BIAPO v8.3...');
            
            this.estadoSistema.carregandoDados = true;
            
            // 1. Configurar estrutura b√°sica
            this._configurarEstruturaBasica();
            
            // 2. üî• CARREGAR DADOS DO FIREBASE (SEM USU√ÅRIOS)
            await this._carregarDadosDoFirebaseGlobal();
            
            // 3. Configurar usu√°rio se estiver logado
            this._configurarUsuarioAtual();
            
            // 4. Detectar modo an√¥nimo
            this._detectarModoAnonimo();
            
            // 5. Inicializar m√≥dulos DEPOIS dos dados carregados
            this._inicializarModulos();
            
            // 6. Renderizar interface
            this._renderizarInterface();
            
            // 7. Finalizar inicializa√ß√£o
            this.estadoSistema.inicializado = true;
            this.estadoSistema.carregandoDados = false;
            this.estadoSistema.ultimoCarregamento = new Date().toISOString();
            
            console.log('‚úÖ Sistema BIAPO v8.3 inicializado com sucesso!');
            console.log(`üìä Eventos carregados: ${this.dados.eventos.length}`);
            console.log(`üë§ Modo: ${this.estadoSistema.modoAnonimo ? 'An√¥nimo (leitura)' : 'Autenticado (escrita)'}`);
            console.log(`üë• Usu√°rios em Auth.equipe: ${typeof Auth !== 'undefined' && Auth.equipe ? Object.keys(Auth.equipe).length : 'N/A'}`);
            
        } catch (error) {
            console.error('‚ùå Erro na inicializa√ß√£o:', error);
            this.estadoSistema.carregandoDados = false;
            
            // Fallback: usar estrutura vazia
            this._configurarEstruturaBasica();
            this._inicializarModulos();
            this._renderizarInterface();
        }
    },

    // üî• NOVA FUN√á√ÉO v8.3: CARREGAR DADOS GLOBAIS SEM USU√ÅRIOS
    async _carregarDadosDoFirebaseGlobal() {
        try {
            console.log('üì• Carregando dados globais do Firebase (SEM usu√°rios)...');
            
            // üî• VERIFICAR FIREBASE SEM DEPENDER DE AUTH
            if (typeof database === 'undefined' || !database) {
                console.warn('‚ö†Ô∏è Firebase n√£o dispon√≠vel, usando dados locais');
                return;
            }
            
            // üî• CARREGAR DADOS SEM VERIFICA√á√ÉO DE USU√ÅRIO
            const dadosFirebase = await Promise.race([
                this._buscarDadosFirebaseGlobal(),
                this._timeoutPromise(8000, 'Timeout ao carregar dados globais')
            ]);
            
            if (dadosFirebase && typeof dadosFirebase === 'object') {
                // üî• APLICAR DADOS CARREGADOS (SEM USU√ÅRIOS)
                this.dados = {
                    eventos: dadosFirebase.eventos || [],
                    areas: dadosFirebase.areas || {},
                    tarefas: dadosFirebase.tarefas || [],
                    // üî• USU√ÅRIOS REMOVIDOS - N√ÉO CARREGAR DO FIREBASE
                    // usuarios: dadosFirebase.usuarios || {}, // REMOVIDO
                    metadata: dadosFirebase.metadata || { versao: '8.3.0' }
                };
                
                console.log(`‚úÖ Dados globais carregados: ${this.dados.eventos.length} eventos`);
                console.log(`üìç √Åreas: ${Object.keys(this.dados.areas).length}`);
                console.log(`üë• Auth.equipe preservado: ${typeof Auth !== 'undefined' && Auth.equipe ? Object.keys(Auth.equipe).length + ' usu√°rios' : 'N/A'}`);
                
                // Atualizar timestamp
                if (this.dados.metadata) {
                    this.dados.metadata.ultimoCarregamento = new Date().toISOString();
                }
                
            } else {
                console.warn('‚ö†Ô∏è Dados do Firebase inv√°lidos, usando estrutura vazia');
                this._configurarEstruturaBasica();
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao carregar do Firebase:', error.message);
            console.log('üìÇ Tentando carregar backup local...');
            
            // Fallback: tentar backup local
            await this._tentarCarregarBackupLocal();
        }
    },

    // üî• BUSCAR DADOS DO FIREBASE GLOBAL (SEM USU√ÅRIOS)
    async _buscarDadosFirebaseGlobal() {
        try {
            console.log('üîç Buscando dados no path /dados (SEM usu√°rios)...');
            
            const snapshot = await database.ref('dados').once('value');
            const dados = snapshot.val();
            
            if (dados) {
                console.log('üì¶ Dados encontrados no Firebase:');
                console.log(`  - Eventos: ${dados.eventos ? dados.eventos.length : 0}`);
                console.log(`  - √Åreas: ${dados.areas ? Object.keys(dados.areas).length : 0}`);
                console.log(`  - Usu√°rios: ${dados.usuarios ? Object.keys(dados.usuarios).length + ' (IGNORADOS)' : 'nenhum'}`);
                
                // üî• RETORNAR DADOS SEM USU√ÅRIOS
                return {
                    eventos: dados.eventos || [],
                    areas: dados.areas || {},
                    tarefas: dados.tarefas || [],
                    // usuarios: REMOVIDO - n√£o carregar do Firebase
                    metadata: dados.metadata || {}
                };
            } else {
                console.log('üì≠ Nenhum dado encontrado no Firebase');
                return null;
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao buscar dados globais:', error);
            throw error;
        }
    },

    // üî• DETECTAR MODO AN√îNIMO
    _detectarModoAnonimo() {
        // Usu√°rio n√£o autenticado = modo an√¥nimo (apenas leitura)
        this.estadoSistema.modoAnonimo = !this.estadoSistema.usuarioAutenticado;
        
        if (this.estadoSistema.modoAnonimo) {
            console.log('üëÅÔ∏è Modo an√¥nimo ativado - apenas visualiza√ß√£o');
            
            // Mostrar indicador visual se necess√°rio
            this._mostrarIndicadorModoAnonimo();
        }
    },

    // üî• MOSTRAR INDICADOR MODO AN√îNIMO
    _mostrarIndicadorModoAnonimo() {
        try {
            // Verificar se j√° existe indicador
            if (document.getElementById('indicadorAnonimo')) {
                return;
            }
            
            // Criar indicador visual
            const indicador = document.createElement('div');
            indicador.id = 'indicadorAnonimo';
            indicador.style.cssText = `
                position: fixed;
                top: 10px;
                right: 10px;
                background: linear-gradient(135deg, #374151, #1f2937);
                color: white;
                padding: 8px 16px;
                border-radius: 20px;
                font-size: 12px;
                font-weight: 600;
                z-index: 1000;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                display: flex;
                align-items: center;
                gap: 6px;
            `;
            
            indicador.innerHTML = `
                <span>üëÅÔ∏è</span>
                <span>Modo Visualiza√ß√£o</span>
                <small style="opacity: 0.8; margin-left: 4px;">(Apenas Leitura)</small>
            `;
            
            document.body.appendChild(indicador);
            
        } catch (error) {
            // Silencioso - indicador √© opcional
        }
    },

    // üî• TIMEOUT PROMISE (para evitar travamento)
    _timeoutPromise(ms, mensagem) {
        return new Promise((_, reject) => {
            setTimeout(() => reject(new Error(mensagem)), ms);
        });
    },

    // üî• TENTAR CARREGAR BACKUP LOCAL
    async _tentarCarregarBackupLocal() {
        try {
            if (typeof Persistence !== 'undefined' && Persistence.recuperarBackupLocal) {
                const backup = Persistence.recuperarBackupLocal();
                
                if (backup) {
                    // üî• APLICAR BACKUP SEM USU√ÅRIOS
                    this.dados = {
                        eventos: backup.eventos || [],
                        areas: backup.areas || {},
                        tarefas: backup.tarefas || [],
                        // usuarios: REMOVIDO - n√£o carregar do backup
                        metadata: backup.metadata || {}
                    };
                    console.log(`üìÇ Backup local carregado: ${this.dados.eventos.length} eventos (usu√°rios preservados)`);
                    return;
                }
            }
            
            // Se n√£o h√° backup, usar estrutura vazia
            console.log('üìù Iniciando com dados vazios');
            this._configurarEstruturaBasica();
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro no backup local:', error);
            this._configurarEstruturaBasica();
        }
    },

    // ‚úÖ CONFIGURAR ESTRUTURA B√ÅSICA (SEM USU√ÅRIOS)
    _configurarEstruturaBasica() {
        if (!this.dados.eventos) this.dados.eventos = [];
        if (!this.dados.areas) this.dados.areas = {};
        if (!this.dados.tarefas) this.dados.tarefas = [];
        // üî• USU√ÅRIOS REMOVIDOS - n√£o inicializar aqui
        if (!this.dados.metadata) {
            this.dados.metadata = {
                versao: '8.3.0',
                ultimaAtualizacao: new Date().toISOString()
            };
        }
        
        // Aplicar estrutura padr√£o se necess√°rio
        if (typeof DataStructure !== 'undefined' && DataStructure.inicializarDados) {
            const estruturaPadrao = DataStructure.inicializarDados();
            
            // Mesclar apenas se dados est√£o vazios (SEM USU√ÅRIOS)
            if (Object.keys(this.dados.areas).length === 0) {
                this.dados.areas = estruturaPadrao.areas;
            }
            // üî• N√ÉO mesclar usu√°rios
            // if (Object.keys(this.dados.usuarios).length === 0) {
            //     this.dados.usuarios = estruturaPadrao.usuarios; // REMOVIDO
            // }
        }
        
        console.log('‚úÖ Estrutura b√°sica configurada (Auth.equipe preservado)');
    },

    // ‚úÖ CONFIGURAR USU√ÅRIO ATUAL
    _configurarUsuarioAtual() {
        try {
            // Verificar se h√° usu√°rio autenticado
            if (typeof Auth !== 'undefined' && Auth.obterUsuario) {
                this.usuarioAtual = Auth.obterUsuario();
                
                if (this.usuarioAtual) {
                    this.estadoSistema.usuarioAutenticado = true;
                    this.estadoSistema.usuarioEmail = this.usuarioAtual.email;
                    console.log(`üë§ Usu√°rio autenticado: ${this.usuarioAtual.email}`);
                } else {
                    console.log('üëÅÔ∏è Usu√°rio an√¥nimo detectado');
                }
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao configurar usu√°rio:', error);
        }
    },

    // üî• INICIALIZAR M√ìDULOS (DEPOIS DOS DADOS CARREGADOS)
    _inicializarModulos() {
        try {
            console.log('üîß Inicializando m√≥dulos...');
            
            // 1. Aguardar um pouco para garantir que dados est√£o prontos
            setTimeout(() => {
                // 2. Inicializar Calendar (que vai usar App.dados.eventos)
                if (typeof Calendar !== 'undefined' && Calendar.inicializar) {
                    Calendar.inicializar();
                    console.log('‚úÖ Calendar inicializado');
                }
                
                // 3. Inicializar outros m√≥dulos
                if (typeof Tasks !== 'undefined' && Tasks.inicializar) {
                    Tasks.inicializar();
                    console.log('‚úÖ Tasks inicializado');
                }
                
            }, 200); // 200ms para garantir que dados est√£o prontos
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar m√≥dulos:', error);
        }
    },

    // ‚úÖ RENDERIZAR INTERFACE
    _renderizarInterface() {
        try {
            // Atualizar informa√ß√µes da interface
            this._atualizarInfoInterface();
            
            // Renderizar dashboard se fun√ß√£o existe
            if (typeof this.renderizarDashboard === 'function') {
                this.renderizarDashboard();
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao renderizar interface:', error);
        }
    },

    // ‚úÖ ATUALIZAR INFORMA√á√ïES DA INTERFACE
    _atualizarInfoInterface() {
        try {
            // Data atual
            const agora = new Date();
            const dataElement = document.getElementById('dataAtual');
            if (dataElement) {
                dataElement.textContent = agora.toLocaleDateString('pt-BR', {
                    weekday: 'long',
                    day: 'numeric',
                    month: 'long'
                });
            }
            
            // M√™s e ano
            const mesAnoElement = document.getElementById('mesAno');
            if (mesAnoElement) {
                mesAnoElement.textContent = agora.toLocaleDateString('pt-BR', {
                    month: 'long',
                    year: 'numeric'
                });
            }
            
            // Usu√°rio logado ou an√¥nimo
            const usuarioElement = document.getElementById('usuarioLogado');
            if (usuarioElement) {
                if (this.estadoSistema.modoAnonimo) {
                    usuarioElement.textContent = 'üëÅÔ∏è Visualiza√ß√£o';
                    usuarioElement.style.opacity = '0.7';
                } else {
                    const nomeUsuario = this.usuarioAtual?.displayName || this.usuarioAtual?.email || 'Sistema';
                    usuarioElement.textContent = `üë§ ${nomeUsuario}`;
                    usuarioElement.style.opacity = '1';
                }
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao atualizar interface:', error);
        }
    },

    // üîÑ RECARREGAR DADOS DO FIREBASE (SEM USU√ÅRIOS)
    async recarregarDados() {
        try {
            console.log('üîÑ Recarregando dados (preservando Auth.equipe)...');
            
            this.estadoSistema.carregandoDados = true;
            
            // Carregar dados atualizados (sempre global, sem usu√°rios)
            await this._carregarDadosDoFirebaseGlobal();
            
            // Atualizar m√≥dulos
            if (typeof Calendar !== 'undefined' && Calendar.atualizarEventos) {
                Calendar.atualizarEventos();
            }
            
            // Atualizar interface
            this._renderizarInterface();
            
            this.estadoSistema.carregandoDados = false;
            
            if (typeof Notifications !== 'undefined') {
                Notifications.success('üîÑ Dados atualizados (usu√°rios preservados)!');
            }
            
            console.log('‚úÖ Dados recarregados com sucesso (Auth.equipe preservado)');
            
        } catch (error) {
            console.error('‚ùå Erro ao recarregar dados:', error);
            this.estadoSistema.carregandoDados = false;
            
            if (typeof Notifications !== 'undefined') {
                Notifications.error('Erro ao recarregar dados');
            }
        }
    },

    // üíæ SALVAR DADOS (PROTEGIDO POR AUTH)
    async salvarDados() {
        // üî• VERIFICA√á√ÉO DE AUTH APENAS PARA SALVAMENTO
        if (this.estadoSistema.modoAnonimo) {
            if (typeof Notifications !== 'undefined') {
                Notifications.warning('‚ö†Ô∏è Login necess√°rio para salvar dados');
            }
            console.warn('‚ö†Ô∏è Tentativa de salvamento em modo an√¥nimo bloqueada');
            return Promise.reject('Login necess√°rio para salvar');
        }
        
        try {
            if (typeof Persistence !== 'undefined' && Persistence.salvarDados) {
                await Persistence.salvarDados();
            }
        } catch (error) {
            console.error('‚ùå Erro ao salvar dados:', error);
        }
    },

    // üíæ SALVAR DADOS CR√çTICO (PROTEGIDO POR AUTH)
    async salvarDadosCritico() {
        // üî• VERIFICA√á√ÉO DE AUTH APENAS PARA SALVAMENTO
        if (this.estadoSistema.modoAnonimo) {
            if (typeof Notifications !== 'undefined') {
                Notifications.warning('‚ö†Ô∏è Login necess√°rio para salvar eventos');
            }
            console.warn('‚ö†Ô∏è Tentativa de salvamento cr√≠tico em modo an√¥nimo bloqueada');
            return Promise.reject('Login necess√°rio para salvar');
        }
        
        try {
            if (typeof Persistence !== 'undefined' && Persistence.salvarDadosCritico) {
                await Persistence.salvarDadosCritico();
            }
        } catch (error) {
            console.error('‚ùå Erro ao salvar dados cr√≠tico:', error);
        }
    },

    // üìä RENDERIZAR DASHBOARD
    renderizarDashboard() {
        try {
            // Implementar renderiza√ß√£o do dashboard se necess√°rio
            console.log('üìä Dashboard atualizado');
            
        } catch (error) {
            console.error('‚ùå Erro ao renderizar dashboard:', error);
        }
    },

    // üìä OBTER STATUS DO SISTEMA
    obterStatusSistema() {
        return {
            inicializado: this.estadoSistema.inicializado,
            carregandoDados: this.estadoSistema.carregandoDados,
            usuarioAutenticado: this.estadoSistema.usuarioAutenticado,
            modoAnonimo: this.estadoSistema.modoAnonimo,
            versao: this.estadoSistema.versao,
            totalEventos: this.dados.eventos.length,
            totalAreas: Object.keys(this.dados.areas).length,
            // üî• USU√ÅRIOS DO Auth.equipe
            totalUsuarios: typeof Auth !== 'undefined' && Auth.equipe ? Object.keys(Auth.equipe).length : 0,
            fonteUsuarios: 'Auth.equipe',
            ultimoCarregamento: this.estadoSistema.ultimoCarregamento,
            firebase: typeof database !== 'undefined',
            modules: {
                Calendar: typeof Calendar !== 'undefined',
                Events: typeof Events !== 'undefined',
                Persistence: typeof Persistence !== 'undefined',
                Auth: typeof Auth !== 'undefined',
                AdminUsersManager: typeof AdminUsersManager !== 'undefined'
            },
            permissoes: {
                leitura: true,
                escrita: !this.estadoSistema.modoAnonimo,
                admin: this.usuarioAtual?.admin || false
            },
            integracao: {
                authEquipePreservado: typeof Auth !== 'undefined' && !!Auth.equipe,
                dadosFirebaseSemUsuarios: !this.dados.hasOwnProperty('usuarios')
            }
        };
    },

    // üîß FUN√á√ïES DE UTILIDADE
    obterEventos() {
        return this.dados.eventos || [];
    },

    adicionarEvento(evento) {
        if (this.estadoSistema.modoAnonimo) {
            throw new Error('Login necess√°rio para adicionar eventos');
        }
        
        if (!this.dados.eventos) this.dados.eventos = [];
        this.dados.eventos.push(evento);
    },

    atualizarEvento(id, dadosAtualizados) {
        if (this.estadoSistema.modoAnonimo) {
            throw new Error('Login necess√°rio para atualizar eventos');
        }
        
        const index = this.dados.eventos.findIndex(e => e.id == id);
        if (index !== -1) {
            this.dados.eventos[index] = { ...this.dados.eventos[index], ...dadosAtualizados };
        }
    },

    removerEvento(id) {
        if (this.estadoSistema.modoAnonimo) {
            throw new Error('Login necess√°rio para remover eventos');
        }
        
        this.dados.eventos = this.dados.eventos.filter(e => e.id != id);
    },

    // üî• VERIFICAR SE PODE EDITAR
    podeEditar() {
        return !this.estadoSistema.modoAnonimo;
    },

    // üî• VERIFICAR SE √â ADMIN
    ehAdmin() {
        return this.usuarioAtual?.admin === true;
    },

    // üî• NOVA FUN√á√ÉO: OBTER USU√ÅRIOS (DELEGADO PARA Auth.equipe)
    obterUsuarios() {
        try {
            if (typeof Auth !== 'undefined' && Auth.equipe) {
                return Auth.equipe;
            }
            console.warn('‚ö†Ô∏è Auth.equipe n√£o dispon√≠vel');
            return {};
        } catch (error) {
            console.error('‚ùå Erro ao obter usu√°rios:', error);
            return {};
        }
    }
};

// ‚úÖ EXPOSI√á√ÉO GLOBAL
window.App = App;

// ‚úÖ FUN√á√ïES GLOBAIS DE CONVENI√äNCIA
window.recarregarDados = () => App.recarregarDados();
window.statusSistema = () => App.obterStatusSistema();

// üî• VERIFICA√á√ÉO DE SISTEMA (DEBUG) v8.3
window.verificarSistema = () => {
    const status = App.obterStatusSistema();
    console.table({
        'Inicializado': status.inicializado ? 'Sim' : 'N√£o',
        'Modo': status.modoAnonimo ? 'An√¥nimo' : 'Autenticado',
        'Eventos': status.totalEventos,
        '√Åreas': status.totalAreas,
        'Usu√°rios (Auth.equipe)': status.totalUsuarios,
        'Fonte Usu√°rios': status.fonteUsuarios,
        'Firebase': status.firebase ? 'Conectado' : 'Offline',
        'Pode Editar': status.permissoes.escrita ? 'Sim' : 'N√£o',
        'Auth.equipe Preservado': status.integracao.authEquipePreservado ? 'Sim' : 'N√£o',
        'Dados sem usu√°rios': status.integracao.dadosFirebaseSemUsuarios ? 'Sim' : 'N√£o'
    });
    return status;
};

// üî• DEBUG ESPEC√çFICO PARA USU√ÅRIOS v8.3
window.debugUsuarios = () => {
    console.log('üîç ============ DEBUG USU√ÅRIOS v8.3 ============');
    
    const authEquipe = typeof Auth !== 'undefined' && Auth.equipe ? Auth.equipe : null;
    const appDados = App.dados.usuarios || null;
    
    console.log('üë• Auth.equipe:', authEquipe ? Object.keys(authEquipe).length + ' usu√°rios' : 'INDISPON√çVEL');
    console.log('üìä App.dados.usuarios:', appDados ? Object.keys(appDados).length + ' usu√°rios' : 'N√ÉO EXISTE (CORRETO)');
    
    if (authEquipe) {
        console.log('üìã Usu√°rios em Auth.equipe:');
        Object.keys(authEquipe).forEach(key => {
            const user = authEquipe[key];
            console.log(`  - ${key}: ${user.nome} (${user.email})`);
        });
    }
    
    console.log('üéØ Fonte √∫nica de usu√°rios:', App.obterUsuarios() === authEquipe ? 'CORRETA' : 'PROBLEMA');
    console.log('‚úÖ App.dados SEM usu√°rios:', !App.dados.hasOwnProperty('usuarios') ? 'CORRETO' : 'PROBLEMA');
    
    return {
        authEquipe: authEquipe ? Object.keys(authEquipe) : null,
        appDados: appDados ? Object.keys(appDados) : null,
        fonteUnica: App.obterUsuarios() === authEquipe,
        dadosSemUsuarios: !App.dados.hasOwnProperty('usuarios')
    };
};

// üî• INICIALIZA√á√ÉO AUTOM√ÅTICA CORRIGIDA v8.3
document.addEventListener('DOMContentLoaded', async () => {
    // Aguardar outros m√≥dulos carregarem
    setTimeout(async () => {
        await App.inicializar();
    }, 500); // 500ms para garantir que todos os m√≥dulos est√£o carregados
});

// ‚úÖ LOG FINAL
console.log('üöÄ App.js v8.3 - CORRE√á√ÉO DEFINITIVA PERSIST√äNCIA carregado!');

/*
üî• CORRE√á√ïES DEFINITIVAS v8.3:
- _carregarDadosDoFirebaseGlobal(): N√ÉO carrega usu√°rios do Firebase ‚úÖ
- _buscarDadosFirebaseGlobal(): Ignora dados de usu√°rios ‚úÖ
- _configurarEstruturaBasica(): N√ÉO inicializa usu√°rios ‚úÖ
- this.dados: N√ÉO cont√©m propriedade 'usuarios' ‚úÖ
- obterUsuarios(): Delegado para Auth.equipe ‚úÖ
- recarregarDados(): Preserva Auth.equipe ‚úÖ
- Status mostra fonte de usu√°rios como Auth.equipe ‚úÖ
- Debug espec√≠fico para verificar usu√°rios ‚úÖ

üìä RESULTADO DEFINITIVO:
- App.dados N√ÉO cont√©m usu√°rios ‚úÖ
- Auth.equipe nunca √© sobrescrito ‚úÖ
- AdminUsersManager pode persistir sem conflito ‚úÖ
- Firebase n√£o interfere com usu√°rios ‚úÖ
- Sistema v8.3 COM PERSIST√äNCIA FUNCIONANDO ‚úÖ
- PROBLEMA RESOLVIDO DEFINITIVAMENTE ‚úÖ
*/
